[{"Question": "TensorFlow not found using pip", "Answer": "\nI found this to finally work.\npython3 -m pip install --upgrade https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-1.12.0-py3-none-any.whl\n\nEdit 1: This was tested on Windows (8, 8.1, 10), Mac and Linux. Change python3 to python according to your configuration. Change py3 to py2 in the url if you are using Python 2.x.\nEdit 2: A list of different versions if someone needs: https://storage.googleapis.com/tensorflow\nEdit 3: A list of urls for the available wheel packages is available here:\nhttps://www.tensorflow.org/install/pip#package-location\n", "Time": "Feb 6 at", "Comment 1": "\nThis may be the right answer, but users please note that this command is for Mac only, not linux.\r\n                \r\n                    \u2013\u00a0penta\nApr 9 '17 at 16:26\n", "Comment 2": "\nThat's is wierd. As the URL which u have specified mentions Mac & if you try to use this url it will install. But tensorflow will actually not work.\r\n                \r\n                    \u2013\u00a0penta\nApr 12 '17 at 14:44\n", "Comment 3": "\nThe windows version of the URL (for v.1.2.1) is storage.googleapis.com/tensorflow/windows/cpu/\u2026. This only works with the AMD64 version of Python. A full list of tensorflow versions is here: storage.googleapis.com/tensorflow\r\n                \r\n                    \u2013\u00a0c2huc2hu\nJul 11 '17 at 3:27\n\n\n\n", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "687"}, {"Question": "TensorFlow not found using pip", "Answer": "\nYou need a 64-bit version of Python and in your case are using a 32-bit version. As of now Tensorflow only supports 64-bit versions of Python 3.5.x and 3.6.x on Windows. See the install docs to see what is currently supported\nTo check which version of Python you are running, type python or python3 to start the interpreter, and then type import struct;print(struct.calcsize(\"P\") * 8) and that will print either 32 or 64 to tell you which bit version of Python you are running.\nFrom comments:\nTo download a different version of Python for Windows, go to python.org/downloads/windows and scroll down until you see the version you want that ends in a \"64\". That will be the 64 bit version that should work with tensorflow\n", "Time": "Mar 6 at", "Comment 1": "\n>>> import platform;print(platform.architecture()) ('64bit', 'WindowsPE') but still I am seeing this exception\r\n                \r\n                    \u2013\u00a0Sujoy\nMar 1 '17 at 16:43\n", "Comment 2": "\nSuspicious of the \"top\" answer; this seems simple, intuitive, fast and safe by comparison. Tested ok with Python 3.6.4 on Windows 7.\r\n                \r\n                    \u2013\u00a0omatai\nFeb 19 '18 at 22:06\n", "Comment 3": "\nTo check which version of Python you are running, type python or python3 to start the interpreter, and then type import struct;print(struct.calcsize(\"P\") * 8) and that will print either 32 or 64 to tell you which type you are running.\r\n                \r\n                    \u2013\u00a0Pro Q\nJun 22 '18 at 15:37\n", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "258"}, {"Question": "TensorFlow not found using pip", "Answer": "\nYou need to use right version of Python and pip\nOn Windows 10, with Python 3.6.X version I was facing same then after checking deliberately , I noticed I had Python-32 bit installation on my 64 bit machine. Remember TensorFlow is only compatible with 64bit installation of python. Not 32 bit of Python\n\nIf we download Python from python.org , the default installation would be 32 bit. So we have to download 64 bit installer manually to install Python 64 bit. And then add below to PATH environment.\nC:\\Users\\AppData\\Local\\Programs\\Python\\Python36\nC:\\Users\\AppData\\Local\\Programs\\Python\\Python36\\Scripts\n\nThen run gpupdate /Force on command prompt. If python command doesnt work for 64 bit restart your machine.\nThen run python on command prompt. It should show 64 bit\nC:\\Users\\YOURNAME>python\nPython 3.6.3 (v3.6.3:2c5fed8, Oct  3 2017, 18:11:49) [MSC v.1900 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\nThen run below command to install tensorflow CPU version(recommended)\npip3 install --upgrade tensorflow\n\n\nUpdate - Python 3.7\nCurrently only Python 3.5 and Python 3.6 are supported officially. Tensorflow has not released binaries for Python 3.7 still officially, we might need to wait a little for it to be released. You can use Python 3.6.x alongside or Anaconda with Python<3.7 virtual environment for time being.\n", "Time": "Jan 12 '19", "Comment 1": "\nWhile providing a link that may answer the question is fine, but it will be better if you can also include the necessary explanation here in the answer itself. Link may not work in the near future for any number of reasons say author removes/changes the pages, etc.\r\n                \r\n                    \u2013\u00a0n4m31ess_c0d3r\nNov 30 '17 at 21:37\n", "Comment 2": "\nI did not realise I had installed Python 3.6.x 32-bit version on my 64-bit machine. Need to uninstall that and follow your instruction in this post. All works now. Thank you!\r\n                \r\n                    \u2013\u00a0yangli.liy\nFeb 4 '18 at 10:51\n", "Comment 3": "\nThanks.  To simplify this answer 2 points helped me 1.) use 64 bit version. 2.) Only python 3.5 and 3.6 are supported. Don't try use 3.7\r\n                \r\n                    \u2013\u00a0Harry\nJan 10 '19 at 14:29\n\n\n\n", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "70"}, {"Question": "TensorFlow not found using pip", "Answer": "\nIf you are trying to install it on a windows machine you need to have a 64-bit version of python 3.5. This is the only way to actually install it. From the website:\n\nTensorFlow supports only 64-bit Python 3.5 on Windows. We have tested the pip packages with the following distributions of Python:\nPython 3.5 from Anaconda\nPython 3.5 from python.org.\n\nYou can download the proper version of python from here (make sure you grab one of the ones that says \"Windows x86-64\")\nYou should now be able to install with pip install tensorflow or python -m pip install tensorflow (make sure that you are using the right pip, from python3, if you have both python2 and python3 installed)\nRemember to install Anaconda 3-5.2.0 as the latest version which is 3-5.3.0 have python version 3.7 which is not supported by Tensorflow.\n", "Time": "Dec 22 '18", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "41"}, {"Question": "TensorFlow not found using pip", "Answer": "\nFrom tensorflow website: \"You will need pip version 8.1 or later for the following commands to work\". Run this command to upgrade your pip, then try install tensorflow again:\npip install --upgrade pip\n\n", "Time": "Dec 30 '16", "Comment 1": "\n$ pip3 --version pip 9.0.1 from c:\\work\\apps\\python\\lib\\site-packages (python 3.6)  But still I see this error.\r\n                \r\n                    \u2013\u00a0Sujoy\nMar 1 '17 at 16:36\n\n\n\n", "Comment 2": "\ntensorflow does not work with python 3.6. You need version 3.5\r\n                \r\n                    \u2013\u00a0Jodo\nMar 19 '17 at 21:13\n", "Comment 3": "\nAlso, I had to use python -m pip install --upgrade pip. Otherwise I would get file permission issues...\r\n                \r\n                    \u2013\u00a0Jodo\nMar 19 '17 at 21:21\n", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "40"}, {"Question": "TensorFlow not found using pip", "Answer": "\nI figured out that TensorFlow 1.12.0 only works with Python version 3.5.2. I had Python 3.7 but that didn't work. So, I had to downgrade Python and then I could install TensorFlow to make it work.\nTo downgrade your python version from 3.7 to 3.6\nconda install python=3.6.8\n\n", "Time": "May 25 '19", "Comment 1": "\nhow to downgrade v3.6 to v3.5.2 ?\r\n                \r\n                    \u2013\u00a0Essam Mohamed Fahmi\nSep 13 '17 at 1:38\n", "Comment 2": "\nInstall 3.5.2 and update your classpath to point to 3.5.2. You can change back to 3.6 for other python stuff.\r\n                \r\n                    \u2013\u00a0Sujoy\nSep 13 '17 at 12:59\n", "Comment 3": "\nRuntimeWarning: compile time version 3.6 of module 'tensorflow.python.framework.fast_tensor_u til' does not match runtime version 3.7.... It is due to this error it is unable to fetch\r\n                \r\n                    \u2013\u00a0Sumit Kumar Saha\nJan 26 '19 at 10:42\n\n\n\n", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "39"}, {"Question": "TensorFlow not found using pip", "Answer": "\nUpdated 11/28/2016: TensorFlow is now available in PyPI, starting with release 0.12. You can type\npip install tensorflow\n\n...or...\npip install tensorflow-gpu\n\n...to install the CPU-only or GPU-accelerated version of TensorFlow respectively.\n\nPrevious answer: TensorFlow is not yet in the PyPI repository, so you have to specify the URL to the appropriate \"wheel file\" for your operating system and Python version.\nThe full list of supported configurations is listed on the TensorFlow website, but for example, to install version 0.10 for Python 2.7 on Linux, using CPU only, you would type the following command:\n$ pip install https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.10.0rc0-cp27-none-linux_x86_64.whl\n\n", "Time": "Nov 29 '16", "Comment 1": "\nwill it work or will I need to setup other things also according to what tensorflow.org/versions/r0.10/get_started/os_setup.html says?\r\n                \r\n                    \u2013\u00a0user6574649\nAug 12 '16 at 3:58\n\n\n\n", "Comment 2": "\nI still get the same error on OSX, is it working for everyone else?\r\n                \r\n                    \u2013\u00a0lemonzi\nJan 19 '17 at 16:55\n", "Comment 3": "\n@lemonzi, I also had an error in OSX, just posted a solution that worked for me (solution was to make sure I had Python 3.6 installed)\r\n                \r\n                    \u2013\u00a0Julia Schwarz\nJan 22 '17 at 18:35\n", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "19"}, {"Question": "TensorFlow not found using pip", "Answer": "\nInstall Python 3.5.x 64 bit amd version here. Make sure you add Python to your PATH variable. Then open a command prompt and type \npython -m pip install --upgrade pip\n\nshould give you the following result :\n Collecting pip\n Using cached pip-9.0.1-py2.py3-none-any.whl\n Installing collected packages: pip\n Found existing installation: pip 7.1.2\n Uninstalling pip-7.1.2:\n Successfully uninstalled pip-7.1.2\n Successfully installed pip-9.0.1\n\nNow type \n pip3 install --upgrade tensorflow\n\n", "Time": "Mar 4 '19", "Comment 1": "\nFatal error in launcher: Unable to create process using '\"'\r\n                \r\n                    \u2013\u00a0DJ Howarth\nOct 10 '17 at 14:46\n", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "12"}, {"Question": "TensorFlow not found using pip", "Answer": "\nI had the same problem and solved with this:\n# Ubuntu/Linux 64-bit, CPU only, Python 2.7\n(tensorflow)$ export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.12.1-cp27-none-linux_x86_64.whl\n\n# Ubuntu/Linux 64-bit, GPU enabled, Python 2.7\n# Requires CUDA toolkit 8.0 and CuDNN v5. For other versions, see \"Installing from sources\" below.\n\n# Mac OS X, CPU only, Python 2.7:\n(tensorflow)$ export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-0.12.1-py2-none-any.whl\n\n# Mac OS X, GPU enabled, Python 2.7:\n(tensorflow)$ export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/mac/gpu/tensorflow_gpu-0.12.1-py2-none-any.whl\n\n# Ubuntu/Linux 64-bit, CPU only, Python 3.4\n(tensorflow)$ export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.12.1-cp34-cp34m-linux_x86_64.whl\n\n# Ubuntu/Linux 64-bit, GPU enabled, Python 3.4\n# Requires CUDA toolkit 8.0 and CuDNN v5. For other versions, see \"Installing from sources\" below.\n(tensorflow)$ export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-0.12.1-cp34-cp34m-linux_x86_64.whl\n\n# Ubuntu/Linux 64-bit, CPU only, Python 3.5\n(tensorflow)$ export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.12.1-cp35-cp35m-linux_x86_64.whl\n\n# Requires CUDA toolkit 8.0 and CuDNN v5. For other versions, see \"Installing from sources\" below.\n(tensorflow)$ export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-0.12.1-cp35-cp35m-linux_x86_64.whl\n\n# Mac OS X, CPU only, Python 3.4 or 3.5:\n(tensorflow)$ export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-0.12.1-py3-none-any.whl\n\n# Mac OS X, GPU enabled, Python 3.4 or 3.5:\n(tensorflow)$ export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/mac/gpu/tensorflow_gpu-0.12.1-py3-none-any.whl\n\nPlus:\n# Python 2\n(tensorflow)$ pip install --upgrade $TF_BINARY_URL\n\n# Python 3\n(tensorflow)$ pip3 install --upgrade $TF_BINARY_URL\n\nFound on Docs.\nUPDATE!\nThere are new links for new versions\nFor example, for installing tensorflow v1.0.0 in OSX you need to use:\nhttps://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-1.0.0-py2-none-any.whl\n\ninstead of\nhttps://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-0.12.1-py2-none-any.whl\n\n", "Time": "Apr 3 '17", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "11"}, {"Question": "TensorFlow not found using pip", "Answer": "\nI had the same error when trying to install on my Mac (using Python 2.7). A similar solution to the one I'm giving here also seemed to work for Python 3 on Windows 8.1 according to a different answer on this page by Yash Kumar Verma\nSolution \nStep 1: go to The URL of the TensorFlow Python package section of the TensorFlow installation page and copy the URL of the relevant link for your Python installation.\nStep 2: open a terminal/command prompt and run the following command:\npip install --upgrade [paste copied url link here] \nSo for me it was the following:\npip install --upgrade https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-1.2.0-py2-none-any.whl\nUpdate (July 21 2017): I tried this with some others who were running on Windows machines with Python 3.6 and they had to change the line in Step 2 to:\npython -m pip install [paste copied url link here]\nUpdate (26 July 2018): For Python 3.6.2 (not 3.7 because it's in 3.6.2 in TF Documentation), you can also use pip3 install --upgrade [paste copied URL here] in Step 2.\n", "Time": "Jul 26 '18", "Comment 1": "\nThis solution installs, but when I import tensorflow I get an error:\r\n                \r\n                    \u2013\u00a0Tensigh\nJul 4 '17 at 1:23\n", "Comment 2": "\nI've only used Keras with Tensorflow as a backend and it works fine. What error message do you get?\r\n                \r\n                    \u2013\u00a0Jonny Brooks\nJul 5 '17 at 7:21\n", "Comment 3": "\nJust tested and tensorflow imports fine for me.\r\n                \r\n                    \u2013\u00a0Jonny Brooks\nJul 6 '17 at 16:22\n", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "11"}, {"Question": "TensorFlow not found using pip", "Answer": "\nTry this, it should work:\n python.exe -m pip install --upgrade https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-0.12.0-py3-none-any.whl\n\n", "Time": "Jan 7 '18", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "8"}, {"Question": "TensorFlow not found using pip", "Answer": "\nTry this:\nexport TF_BINARY_URL=https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-0.12.1-py3-none-any.whl\npip3 install --upgrade $TF_BINARY_URL\n\nSource: https://www.tensorflow.org/get_started/os_setup (page no longer exists)\nUpdate 2/23/17\nDocumentation moved to: https://www.tensorflow.org/install\n", "Time": "Feb 23 '17", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "7"}, {"Question": "TensorFlow not found using pip", "Answer": "\n\nInstall python by checking Add Python to Path\npip3 install --upgrade https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-0.12.0-py3-none-any.whl\n\nThis works for windows 10.0\n", "Time": "Apr 9 '17", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "7"}, {"Question": "TensorFlow not found using pip", "Answer": "\nIf you run into this issue recently (say, after Python 3.7 release in 2018), most likely this is caused by the lack of Python 3.7 support (yet) from the tensorflow side. Try using Python 3.6 instead if you don't mind. There are some tricks you can find from https://github.com/tensorflow/tensorflow/issues/20444, but use them at your own risk. I used the one harpone suggested - first downloaded the tensorflow wheel for Python 3.6 and then renamed it manually...\ncp tensorflow-1.11.0-cp36-cp36m-linux_x86_64.whl tensorflow-1.11.0-cp37-cp37m-linux_x86_64.whl\npip install tensorflow-1.11.0-cp37-cp37m-linux_x86_64.whl\n\nThe good news is that there is a pull request for 3.7 support already. Hope it will be released soon.\n", "Time": "Nov 5 '18", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "7"}, {"Question": "TensorFlow not found using pip", "Answer": "\nI had the same problem. After uninstalling the 32-bit version of python and reinstalling the 64-bit version I tried reinstalling TensorFlow and it worked.\nLink to TensorFlow guide: https://www.tensorflow.org/install/install_windows\n", "Time": "Apr 21 '17", "Comment 1": "\nyes, the 64-bit version fixed it. The install from the main download page is a 32-bit. The link above provides a URL to the 64 bit version.\r\n                \r\n                    \u2013\u00a0Vladan\nMar 20 '18 at 18:23\n", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "6"}, {"Question": "TensorFlow not found using pip", "Answer": "\nIf you're trying to install tensorflow in anaconda and it isn't working, then you may need to downgrade python version because only 3.6.x is currently supported while anaconda has the latest version.\n\ncheck python version: python --version\nif version > 3.6.x then follow step 3, otherwise stop, the problem may be somewhere else\nconda search python\nconda install python=3.6.6\nCheck version again: python --version\nIf version is correct, install tensorflow (step 7)\npip install tensorflow\n\n", "Time": "Sep 30 '18", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "6"}, {"Question": "TensorFlow not found using pip", "Answer": "\nIf you are using the Anaconda Python installation, pip install tensorflow will give the error stated above, shown below:\nCollecting tensorflow\nCould not find a version that satisfies the requirement tensorflow (from versions: )\nNo matching distribution found for tensorflow\n\nAccording to the TensorFlow installation page, you will need to use the --ignore-installed flag when running pip install. \nHowever, before this can be done see this link\nto ensure the TF_BINARY_URL variable is set correctly in relation to the desired version of TensorFlow that you wish to install.\n", "Time": "Jan 19 '17", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "4"}, {"Question": "TensorFlow not found using pip", "Answer": "\nUnfortunately my reputation is to low to command underneath @Sujoy answer.\nIn their docs they claim to support python 3.6.\nThe link provided by @mayur shows that their is indeed only a python3.5 wheel package. This is my try to install tensorflow:\nMicrosoft Windows [Version 10.0.16299.371]\n(c) 2017 Microsoft Corporation. All rights reserved.\n\nC:\\>python3 -m pip install --upgrade pip\nRequirement already up-to-date: pip in d:\\python\\v3\\lib\\site-packages (10.0.0)\n\nC:\\>python3 -m pip -V\npip 10.0.0 from D:\\Python\\V3\\lib\\site-packages\\pip (python 3.6)\n\nC:\\>python3 -m pip install --upgrade tensorflow\nCollecting tensorflow\nCould not find a version that satisfies the requirement tensorflow (from versions: )\nNo matching distribution found for tensorflow\n\nwhile python 3.5 seems to install successfully. I would love to see a python3.6 version since they claim it should also work on python3.6.\nQuoted :\n\"TensorFlow supports Python 3.5.x and 3.6.x on Windows. Note that Python 3 comes with the pip3 package manager, which is the program you'll use to install TensorFlow.\"\nSource : https://www.tensorflow.org/install/install_windows\nPython3.5 install :\nMicrosoft Windows [Version 10.0.16299.371]\n(c) 2017 Microsoft Corporation. All rights reserved.\n\nC:\\>python3 -m pip install --upgrade pip\nRequirement already up-to-date: pip in d:\\python\\v3\\lib\\site-packages (10.0.0)\n\nC:\\>python3 -m pip -V\npip 10.0.0 from D:\\Python\\V3_5\\lib\\site-packages\\pip (python 3.5.2)\n\nC:\\>python3 -m pip install --upgrade tensorflow\nCollecting tensorflow\n  Downloading \n    ....\n    ....\n\nI hope i am terrible wrong here but if not ring a alarm bell \ud83d\ude1b \nEdit:\nA couple of posts below someone pointed out that the following command would work and it did.\npython3 -m pip install --upgrade https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-0.12.0-py3-none-any.whl\n\nStrange pip is not working \ud83e\udd14\n", "Time": "Apr 18 '18", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "4"}, {"Question": "TensorFlow not found using pip", "Answer": "\nThis worked for me with Python 2.7 on Mac OS X Yosemite 10.10.5:\nsudo pip install --upgrade https://storage.googleapis.com/tensorflow/mac/tensorflow-0.5.0-py2-none-any.whl\n\n", "Time": "Mar 11 '17", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "3"}, {"Question": "TensorFlow not found using pip", "Answer": "\nThere are multiple groups of answers to this question. This answer aims to generalize one group of answers:\nThere may not be a version of TensorFlow that is compatible with your version of Python. This is particularly true if you're using a new release of Python. For example, there may be a delay between the release of a new version of Python and the release of TensorFlow for that version of Python.\nIn this case, I believe your options are to:\n1) Downgrade to the previous version of Python.\n2) Compile TensorFlow from the source code.\n3) Wait for a matching version of TensorFlow.\n", "Time": "Oct 25 '19", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "3"}, {"Question": "TensorFlow not found using pip", "Answer": "\nFor windows this worked for me,\nDownload the wheel from this link. Then from command line navigate to your download folder where the wheel is present and simply type in the following command - \npip install tensorflow-1.0.0-cp36-cp36m-win_amd64.whl\n", "Time": "Feb 26 '17", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "2"}, {"Question": "TensorFlow not found using pip", "Answer": "\nI was facing the same issue. I tried the following and it worked.\ninstalling for Mac OS X, anaconda python 2.7\npip uninstall tensorflow\nexport TF_BINARY_URL=<get the correct url from http://tflearn.org/installation/>\npip install --upgrade $TF_BINARY_URL\n\nInstalled tensorflow-1.0.0\n", "Time": "Mar 23 '17", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "2"}, {"Question": "TensorFlow not found using pip", "Answer": "\n\nStart Command Prompt with Administrative Permission\nEnter following command     python -m pip install --upgrade pip\nNext Enter command pip install tensorflow\n\n", "Time": "Jun 4 '17", "Comment 1": "\nerror: Fatal error in launcher: Unable to create process using '\"'\r\n                \r\n                    \u2013\u00a0DJ Howarth\nOct 10 '17 at 14:44\n", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "2"}, {"Question": "TensorFlow not found using pip", "Answer": "\nThe URL to install TensorFlow in Windows, below is the URL. It worked fine for me.\npython -m pip install --upgrade https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-0.12.0-py3-none-any.whl\n\n", "Time": "Aug 16 '17", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "2"}, {"Question": "TensorFlow not found using pip", "Answer": "\nFor pyCharm users:\n\nCheck pip version:\npip3 -V\nIf pip is older than 9.0.1:\npy -3 -m pip install --upgrade pip\nThen:\n**py -3 -m pip install --upgrade\n\nhttps://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-0.12.0-py3-none-any.whl**\n", "Time": "Mar 13 '18", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "2"}, {"Question": "TensorFlow not found using pip", "Answer": "\nFollowing steps allows you to install tensorflow and keras\n\ndownloading Anaconda3-5.2.0 which comes with python 3.6 from https://repo.anaconda.com/archive/\nInstall Anaconda and open Anaconda Prompt and execute below commands \n\nconda install jupyter \nconda install scipy\npip install sklearn\npip install msgpack\npip install pandas\npip install pandas-datareader\npip install matplotlib \npip install pillow\npip install requests\npip install h5py\npip install tensorflow\npip install keras\n\n\n", "Time": "Dec 23 '18", "Comment 1": "\nThe question is about standard Python and just tensorflow.\r\n                \r\n                    \u2013\u00a0ivan_pozdeev\nMay 10 '19 at 9:16\n", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "2"}, {"Question": "TensorFlow not found using pip", "Answer": "\nupdate 2019:\nfor install the preview version of TensorFlow 2 in Google Colab you can use: \n!wget https://developer.nvidia.com/compute/cuda/10.0/Prod/local_installers/cuda-repo-ubuntu1604-10-0-local-10.0.130-410.48_1.0-1_amd64 -O cuda-repo-ubuntu1604-10-0-local-10.0.130-410.48_1.0-1_amd64.deb\n!dpkg -i cuda-repo-ubuntu1604-10-0-local-10.0.130-410.48_1.0-1_amd64.deb\n!apt-key add /var/cuda-repo-10-0-local-10.0.130-410.48/7fa2af80.pub\n!apt-get update\n!apt-get install cuda\n!pip install tf-nightly-gpu-2.0-preview\nand for install the TensorFlow 2 bye pip you can use :\n pip install tf-nightly-gpu-2.0-preview for GPU and\n pip install tf-nightly-2.0-preview \nfor CPU. \n", "Time": "Jan 17 '19", "Comment 1": "\nThank you for the reminder to try the nightly tensorflow (unstable) version. That worked for me.\r\n                \r\n                    \u2013\u00a0Matthew Redmond\nNov 9 '19 at 18:11\n", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "2"}, {"Question": "TensorFlow not found using pip", "Answer": "\nI had this problem on OSX Sierra 10.12.2. It turns out I had the wrong version of Python installed (I had Python 3.4 but tensorflow pypi packages for OSX are only for python 3.5 and up). \nThe solution was to install Python 3.6. Here's what I did to get it working. Note: I used Homebrew to install Python 3.6, you could do the same by using the Python 3.6 installer on python.org\nbrew uninstall python3\nbrew install python3\npython3 --version # Verify that you see \"Python 3.6.0\"\npip install tensorflow # With python 3.6 the install succeeds\npip install jupyter # \"ipython notebook\" didn't work for me until I installed jupyter\nipython notebook # Finally works!\n\n", "Time": "Jan 22 '17", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "1"}, {"Question": "TensorFlow not found using pip", "Answer": "\nExcerpt from tensorflow website\nhttps://www.tensorflow.org/install/install_windows\n\nInstalling with native pip\nIf the following version of Python is not installed on your machine, install it now:\nPython 3.5.x from python.org\n  TensorFlow only supports version 3.5.x of Python on Windows. Note that Python 3.5.x comes with the pip3 package manager, which is the program you'll use to install TensorFlow.\nTo install TensorFlow, start a terminal. Then issue the appropriate pip3 install command in that terminal. To install the CPU-only version of TensorFlow, enter the following command:\n\nC:\\> pip3 install --upgrade tensorflow\nTo install the GPU version of TensorFlow, enter the following command:\n\nC:\\> pip3 install --upgrade tensorflow-gpu\n\n", "Time": "Mar 12 '17", "Comment 1": "\nany reason behind down-voting?\r\n                \r\n                    \u2013\u00a0Ravinder Payal\nApr 22 '17 at 10:56\n", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "1"}, {"Question": "TensorFlow not found using pip", "Answer": "\nIf your command pip install --upgrade tensorflowcompiles, then your version of tensorflow should be the newest. I personally prefer to use anaconda. You can easily install and upgrade tensorflow as follows:\n conda install -c conda-forge tensorflow  # to install\n conda upgrade -c conda-forge tensorflow  # to upgrade\n\nAlso if you want to use it with your GPU you have an easy install:\n conda install -c anaconda tensorflow-gpu\n\nI've been using it for a while now and I have never had any problem.\n", "Time": "Feb 22 '18", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com/questions/38896424/tensorflow-not-found-using-pip&sa=U&ved=2ahUKEwjx04HK0o_oAhUkCqYKHZ2qDBkQFjAAegQIARAB&usg=AOvVaw0HcJUES-BxqpuSwSAOLCz", "UpVotes": "1"}, {"Question": "How to install pip on Windows?", "Answer": "\nPython 2.7.9+ and 3.4+\nGood news! Python 3.4 (released March 2014) and Python 2.7.9 (released December 2014) ship with Pip. This is the best feature of any Python release. It makes the community's wealth of libraries accessible to everyone. Newbies are no longer excluded from using community libraries by the prohibitive difficulty of setup. In shipping with a package manager, Python joins Ruby, Node.js, Haskell, Perl, Go\u2014almost every other contemporary language with a majority open-source community. Thank you, Python.\nIf you do find that pip is not available when using Python 3.4+ or Python 2.7.9+, simply execute e.g.:\npy -3 -m ensurepip\n\nOf course, that doesn't mean Python packaging is problem solved. The experience remains frustrating. I discuss this in the Stack Overflow question Does Python have a package/module management system?.\nAnd, alas for everyone using Python 2.7.8 or earlier (a sizable portion of the community). There's no plan to ship Pip to you. Manual instructions follow.\nPython 2 \u2264 2.7.8 and Python 3 \u2264 3.3\nFlying in the face of its 'batteries included' motto, Python ships without a package manager. To make matters worse, Pip was\u2014until recently\u2014ironically difficult to install.\nOfficial instructions\nPer https://pip.pypa.io/en/stable/installing/#do-i-need-to-install-pip:\nDownload get-pip.py, being careful to save it as a .py file rather than .txt. Then, run it from the command prompt:\npython get-pip.py\n\nYou possibly need an administrator command prompt to do this. Follow Start a Command Prompt as an Administrator (Microsoft TechNet).\nThis installs the pip package, which (in Windows) contains ...\\Scripts\\pip.exe that path must be in PATH environment variable to use pip from the command line (see the second part of 'Alternative Instructions' for adding it to your PATH,\nAlternative instructions\nThe official documentation tells users to install Pip and each of its dependencies from source. That's tedious for the experienced and prohibitively difficult for newbies.\nFor our sake, Christoph Gohlke prepares Windows installers (.msi) for popular Python packages. He builds installers for all Python versions, both 32 and 64 bit. You need to:\n\nInstall setuptools\nInstall pip\n\nFor me, this installed Pip at C:\\Python27\\Scripts\\pip.exe. Find pip.exe on your computer, then add its folder (for example, C:\\Python27\\Scripts) to your path (Start / Edit environment variables). Now you should be able to run pip from the command line. Try installing a package:\npip install httpie\n\nThere you go (hopefully)! Solutions for common problems are given below:\nProxy problems\nIf you work in an office, you might be behind an HTTP proxy. If so, set the environment variables http_proxy and https_proxy. Most Python applications (and other free software) respect these. Example syntax:\nhttp://proxy_url:port\nhttp://username:password@proxy_url:port\n\nIf you're really unlucky, your proxy might be a Microsoft NTLM proxy. Free software can't cope. The only solution is to install a free software friendly proxy that forwards to the nasty proxy. http://cntlm.sourceforge.net/\nUnable to find vcvarsall.bat\nPython modules can be partly written in C or C++. Pip tries to compile from source. If you don't have a C/C++ compiler installed and configured, you'll see this cryptic error message.\n\nError: Unable to find vcvarsall.bat\n\nYou can fix that by installing a C++ compiler such as MinGW or Visual C++. Microsoft actually ships one specifically for use with Python. Or try Microsoft Visual C++ Compiler for Python 2.7.\nOften though it's easier to check Christoph's site for your package.\n", "Time": "Oct 3 '19", "Comment 1": "\n@MikeMcMahon that happened to me too. Put Python before Perl in your path, so typing pip gets you the Python package manager.\r\n                \r\n                    \u2013\u00a0Colonel Panic\nJun 27 '13 at 22:00\n\n\n\n", "Comment 2": "\nI didn't have to do any of this, I just followed the instructions on pip-installer.org/en/latest/installing.html (basically you just write \"python ez_setup.py\" and then \"python get-pip.py\")\r\n                \r\n                    \u2013\u00a0CaptainCodeman\nNov 10 '13 at 19:50\n", "Comment 3": "\nThis is probably a dumb question. I entered python get-pip.py on a windows prompt but get \"python is not recognized as an internal or external command, operable program or batch file.\" Am I doing something wrong? I have Python 2.7.8 installed. Do I need to change the directory? Thanks.\r\n                \r\n                    \u2013\u00a0Andrew\nJul 14 '15 at 16:39\n", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "1811"}, {"Question": "How to install pip on Windows?", "Answer": "\n-- Outdated -- use distribute, not setuptools as described here. --\n-- Outdated #2 -- use setuptools as distribute is deprecated.\nAs you mentioned pip doesn't include an independent installer, but you can install it with its predecessor easy_install.\nSo:\n\nDownload the last pip version from here: http://pypi.python.org/pypi/pip#downloads\nUncompress it\nDownload the last easy installer for Windows: (download the .exe at the bottom of http://pypi.python.org/pypi/setuptools ). Install it.\ncopy the uncompressed pip folder content into C:\\Python2x\\ folder (don't copy the whole folder into it, just the content), because python command doesn't work outside C:\\Python2x folder and then run:  python setup.py install\nAdd your python C:\\Python2x\\Scripts to the path\n\nYou are done. \nNow you can use pip install package to easily install packages as in Linux :)\n", "Time": "Feb 4 '14", "Comment 1": "\nWhen run the command \"python setup.py install\", if you got \"error: pip.egg-info\\PKG-INFO: Permission denied\", then try to remove the read only attribute on the uncompressed pip directory.\r\n                \r\n                    \u2013\u00a0Yoo Matsuo\nMay 5 '11 at 4:04\n", "Comment 2": "\nIf you install a 64-bit version of python, setuptools will not detect your python executable. I found some binaries here that will, though (unofficial): lfd.uci.edu/~gohlke/pythonlibs\r\n                \r\n                    \u2013\u00a0Chris\nJun 27 '11 at 17:18\n", "Comment 3": "\nOnce I've installed pip using easy_install can I remove setuptools by pip uninstall setuptools? Is this okay or would it lead to issues later on?\r\n                \r\n                    \u2013\u00a0Mridang Agarwalla\nAug 20 '11 at 7:40\n", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "300"}, {"Question": "How to install pip on Windows?", "Answer": "\n2014 UPDATE:\n1) If you have installed Python 3.4 or later, pip is included with Python and should already be working on your system.\n2) If you are running a version below Python 3.4 or if pip was not installed with Python 3.4 for some reason, then you'd probably use pip's official installation script get-pip.py. The pip installer now grabs setuptools for you, and works regardless of architecture (32-bit or 64-bit).\nThe installation instructions are detailed here and involve:\n\nTo install or upgrade pip, securely download get-pip.py.\nThen run the following (which may require administrator access):\n\npython get-pip.py\n\n\nTo upgrade an existing setuptools (or distribute), run pip install -U setuptools\n\nI'll leave the two sets of old instructions below for posterity.\nOLD Answers:\nFor Windows editions of the 64 bit variety - 64-bit Windows + Python used to require a separate installation method due to ez_setup, but I've tested the new distribute method on 64-bit Windows running 32-bit Python and 64-bit Python, and you can now use the same method for all versions of Windows/Python 2.7X:\nOLD Method 2 using distribute:\n\nDownload distribute - I threw mine in C:\\Python27\\Scripts (feel free to create a Scripts directory if it doesn't exist.\nOpen up a command prompt (on Windows you should check out conemu2 if you don't use PowerShell) and change (cd) to the directory you've downloaded distribute_setup.py to.\nRun distribute_setup: python distribute_setup.py (This will not work if your python installation directory is not added to your path - go here for help)\nChange the current directory to the Scripts directory for your Python installation (C:\\Python27\\Scripts) or add that directory, as well as the Python base installation directory to your %PATH% environment variable.\nInstall pip using the newly installed setuptools: easy_install pip\n\nThe last step will not work unless you're either in the directory easy_install.exe is located in (C:\\Python27\\Scripts would be the default for Python 2.7), or you have that directory added to your path.\nOLD Method 1 using ez_setup:\nfrom the setuptools page --\n\nDownload ez_setup.py and run it; it will download the appropriate .egg file and install it for you. (Currently, the provided .exe installer does not support 64-bit versions of Python for Windows, due to a distutils installer compatibility issue.\n\nAfter this, you may continue with:\n\nAdd c:\\Python2x\\Scripts to the Windows path (replace the x in Python2x with the actual version number you have installed)\nOpen a new (!) DOS prompt. From there run easy_install pip\n\n", "Time": "May 23 '17", "Comment 1": "\nSo the install is easyinstall, then pip,  then virtualenv, then virtualenvwrapper , then configure independents environments. with script modif in the middle for dealing with proxies... aaarrrgg\r\n                \r\n                    \u2013\u00a0nicolas\nAug 27 '12 at 9:54\n\n\n\n", "Comment 2": "\n@nicolas Yeah, easyinstall is just an outdated interface to setuptools. Pip is awesome, and virtualenv offers the kind of control that you don't get in many other languages without WAY more hackish tactics; perl being the only comparable exception. Ruby has gemsets, but in order to easily swap out Rubies, it's recommended to use either rbenv or rvm - both of which have always felt somewhat hackish to me (though they work beautifully once set up properly).\r\n                \r\n                    \u2013\u00a0AndrewPK\nOct 16 '12 at 19:30\n", "Comment 3": "\nThis exact procedure is automated by pip for windows.\r\n                \r\n                    \u2013\u00a0user474491\nDec 24 '12 at 21:40\n", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "218"}, {"Question": "How to install pip on Windows?", "Answer": "\n2016+ Update: \nThese answers are outdated or otherwise wordy and difficult.\nIf you've got Python 3.4+ or 2.7.9+, it will be installed by default on Windows.  Otherwise, in short:\n\nDownload the pip installer: \nhttps://bootstrap.pypa.io/get-pip.py\nIf paranoid, inspect file to confirm it isn't malicious\n(must b64 decode).\nOpen a console in the download folder as Admin and run\nget-pip.py.  Alternatively, right-click its icon in Explorer and choose the \"run as Admin...\".\n\nThe new binaries pip.exe (and the deprecated easy_install.exe) will be found in the \"%ProgramFiles%\\PythonXX\\Scripts\" folder (or similar), which is often not in your PATH variable.  I recommend adding it.\n", "Time": "Aug 16 '19", "Comment 1": "\nMD5 checksums of the files: get-pip.py=60a3d165e93999895e26b96681b65090  setuptools-1.3.2.tar.gz=441f2e58c0599d31597622a7b9eb605f\r\n                \r\n                    \u2013\u00a0Joris\nNov 16 '13 at 10:49\n\n\n\n", "Comment 2": "\nAs of pip 1.5.1 (Jan 2014) ez_setup/setuptools/distribute isn't needed ahead of time. If needed get-pip will acquire the requirements as well as pip itself.\r\n                \r\n                    \u2013\u00a0matt wilkie\nFeb 4 '14 at 20:08\n\n\n\n", "Comment 3": "\nGood overview of python packaging past and present as of Aug 2016: glyph.twistedmatrix.com/2016/08/python-packaging.html\r\n                \r\n                    \u2013\u00a0Dylan Hogg\nAug 14 '16 at 12:54\n", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "205"}, {"Question": "How to install pip on Windows?", "Answer": "\nPython 3.4, which  was released in March 2014, comes with pip included:\nhttp://docs.python.org/3.4/whatsnew/3.4.html\nSo, since the release of Python 3.4, the up-to-date way to install pip on Windows is to just install Python.\nThe recommended way to use it is to call it as a module, especially with multiple python distributions or versions installed, to guarantee packages go to the correct place:\npython -m pip install --upgrade packageXYZ\nhttps://docs.python.org/3/installing/#work-with-multiple-versions-of-python-installed-in-parallel\n", "Time": "Nov 8 '19", "Comment 1": "\nNote that it also applies to Python 2.7.9\r\n                \r\n                    \u2013\u00a0Roberto\nDec 8 '15 at 15:25\n", "Comment 2": "\nPython 2.x is legacy, Python 3.x is the present and future of the language, according to Python2orPython3\r\n                \r\n                    \u2013\u00a0matth\nDec 9 '15 at 9:18\n\n\n\n", "Comment 3": "\nHmm I installed Python 3.4.4 and I could find pip3.exe following the path in this answer, but in cmd pip is still not recognized. Can anyone help?\r\n                \r\n                    \u2013\u00a0annena\nJan 20 '16 at 9:30\n", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "48"}, {"Question": "How to install pip on Windows?", "Answer": "\nWhen I have to use Windows, I use ActivePython, which automatically adds everything to your PATH and includes a package manager called PyPM which provides binary package management making it faster and simpler to install packages.\npip and easy_install aren't exactly the same thing, so there are some things you can get through pip but not easy_install and vice versa.\nMy recommendation is that you get ActivePython Community Edition and don't worry about the huge hassle of getting everything set up for Python on Windows. Then, you can just use pypm.\nIn case you want to use pip you have to check the PyPM option in the ActiveState installer. After installation you only need to logoff and log on again, and pip will be available on the commandline, because it is contained in the ActiveState installer PyPM option and the paths have been set by the installer for you already. PyPM will also be available, but you do not have to use it.\n", "Time": "May 23 '17", "Comment 1": "\nIt must be noted that ActivePython also includes pip and easy_install. PyPM is a binary package manger, while pip/easy_install are, essentially, source package managers. See code.activestate.com/help/faq/\u2026\r\n                \r\n                    \u2013\u00a0Sridhar Ratnakumar\nFeb 21 '11 at 18:08\n", "Comment 2": "\n@Rafe Kettlet - When I try to install pip in Activepython it gives this error\r\n                \r\n                    \u2013\u00a0Jitendra Vyas\nAug 6 '12 at 18:24\n", "Comment 3": "\n@Jitendra - ActivePython already installs pip for you, so there is no need to install it again afterwards.\r\n                \r\n                    \u2013\u00a0mit\nMay 31 '13 at 7:39\n", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "41"}, {"Question": "How to install pip on Windows?", "Answer": "\nThe up-to-date way is to use Windows' package manager Chocolatey.\nOnce this is installed, all you have to do is open a command prompt and run the following the three commands below, which will install Python 2.7, easy_install and pip. It will automatically detect whether you're on x64 or x86 Windows.\ncinst python\ncinst easy.install\ncinst pip\n\nAll of the other Python packages on the Chocolatey Gallery can be found here.\n", "Time": "Jan 16 '14", "Comment 1": "\nAnd if python is already installed? This caused me nightmares. With python already installed via other means and trying cinst pip just game me errors.\r\n                \r\n                    \u2013\u00a0DevPlayer\nApr 17 '13 at 8:20\n", "Comment 2": "\nChocolatey doesn't seem very robust especially wrt. dependencies. cinst pip at the time of writing just assumes easy_install has been installed, which is not necessarily the case.\r\n                \r\n                    \u2013\u00a0fatuhoku\nOct 23 '13 at 10:48\n", "Comment 3": "\nI've edited the question, to make it work you'll need to have easy_install before you get pip, you can just do cinst easy.install\r\n                \r\n                    \u2013\u00a0Philipp Gayret\nJan 16 '14 at 12:23\n", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "39"}, {"Question": "How to install pip on Windows?", "Answer": "\nUpdate March 2015\nPython 2.7.9 and later (on the Python 2 series), and Python 3.4 and later include pip by default, so you may have pip already.\nIf you don't, run this one line command on your prompt (which may require administrator access):\npython -c \"exec('try: from urllib2 import urlopen \\nexcept: from urllib.request import urlopen');f=urlopen('https://bootstrap.pypa.io/get-pip.py').read();exec(f)\"\n\nIt will install pip. If Setuptools is not already installed, get-pip.py will install it for you too.\nAs mentioned in comments, the above command will download code from the Pip source code repository at GitHub, and dynamically run it at your environment. So be noticed that this is a shortcut of the steps download, inspect and run, all with a single command using Python itself. If you trust Pip, proceed without doubt.\nBe sure that your Windows environment variable PATH includes Python's folders (for Python 2.7.x default install: C:\\Python27 and C:\\Python27\\Scripts, for Python 3.3x: C:\\Python33 and C:\\Python33\\Scripts, and so on).\n", "Time": "Feb 6 '16", "Comment 1": "\nThis should work, but it is worth noting that this could be extremely dangerous if one doesn't have the expertise or bother to inspect the url-file before executing such a command.\r\n                \r\n                    \u2013\u00a0Gringo Suave\nMar 29 '13 at 21:48\n\n\n\n", "Comment 2": "\nI think the simplicity is worth the risk. We are talking about a hack at python-distribute.org? There is a similar approach with sublime package control.\r\n                \r\n                    \u2013\u00a0Fernando Macedo\nApr 1 '13 at 20:08\n", "Comment 3": "\nYes, I have checked the distribute URL and it is ok (for now at least).  The problem is in the general case where the inexperienced run remote executables on recommendation from a forum.  It should come at least with a minimal warning.\r\n                \r\n                    \u2013\u00a0Gringo Suave\nApr 3 '13 at 7:46\n\n\n\n", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "32"}, {"Question": "How to install pip on Windows?", "Answer": "\nInstallers\nI've built Windows installers for both distribute and pip here (the goal being to use pip without having to either bootstrap with easy_install or save and run Python scripts):\n\ndistribute-0.6.27.win32.exe\npip-1.1.win32.exe\n\nOn Windows, simply download and install first distribute, then pip from the above links. The distribute link above does contain stub .exe installers, and these are currently 32-bit only. I haven't tested the effect on 64-bit Windows.\nBuilding on Windows\nThe process to redo this for new versions is not difficult, and I've included it here for reference.\nBuilding distribute\nIn order to get the stub .exe files, you need to have a Visual C++ compiler (it is apparently compilable with MinGW as well)\nhg clone https://bitbucket.org/tarek/distribute\ncd distribute\nhg checkout 0.6.27\nrem optionally, comment out tag_build and tag_svn_revision in setup.cfg\nmsvc-build-launcher.cmd\npython setup.py bdist_win32\ncd ..\necho build is in distribute\\dist\n\nBuilding pip\ngit clone https://github.com/pypa/pip.git\ncd pip\ngit checkout 1.1\npython setup.py bdist_win32\ncd ..\necho build is in pip\\dist\n\n", "Time": "Jul 3 '12", "Comment 1": "\nAh, I missed that there's a launcher.c that needs manual compiling... adjusted and rebuilt distribute - that does mean that this is win32-only...\r\n                \r\n                    \u2013\u00a0David Fraser\nJul 3 '12 at 13:49\n", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "26"}, {"Question": "How to install pip on Windows?", "Answer": "\nThe following works for Python 2.7. Save this script and launch it:  \nhttps://raw.github.com/pypa/pip/master/contrib/get-pip.py  \nPip is installed, then add the path to your environment : \nC:\\Python27\\Scripts\n\nFinally\npip install virtualenv\n\nAlso you need Microsoft Visual C++ 2008 Express to get the good compiler and avoid these kind of messages when installing packages:\nerror: Unable to find vcvarsall.bat\n\nIf you have a 64-bit version of Windows 7, you may read 64-bit Python installation issues on 64-bit Windows 7 to successfully install the Python executable package (issue with registry entries).\n", "Time": "Feb 6 '16", "Comment 1": "\nlink not working. please update it\r\n                \r\n                    \u2013\u00a0swapnil gandhi\nNov 29 '18 at 5:36\n", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "21"}, {"Question": "How to install pip on Windows?", "Answer": "\nTo install pip globally on Python 2.x, easy_install appears to be the best solution as Adri\u00e1n states.\nHowever the installation instructions for pip recommend using virtualenv since every virtualenv has pip installed in it automatically.  This does not require root access or modify your system Python installation.\nInstalling virtualenv still requires easy_install though.\n2018 update: \nPython 3.3+ now includes the venv module for easily creating virtual environments like so:\npython3 -m venv /path/to/new/virtual/environment\nSee documentation for different platform methods of activating the environment after creation, but typically one of:\n$ source <venv>/bin/activate \n\nC:\\> <venv>\\Scripts\\activate.bat\n\n", "Time": "Jun 5 '18", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "18"}, {"Question": "How to install pip on Windows?", "Answer": "\nFor latest Python Download - I have python 3.6 on windows. You don't have to wonder everything you need is there , take  a breath i will show you how to do it.\n\nmake sure where you install python for me its was in the following directory\n\n\n\nNow , lets add python and pip into environment variable path settings\n  if you are on windows, so that typing pip or python anywhere call\n  python aor pip from where they are installed.\n\nSo, PIP is found under the folder in above screen \"SCRIPTS\"\nLets add Python and PIP in environment variable path. \n\nAlmost Done , Let test with CMD to install goole package using pip.\npip install google\n\n\nBYE BYE! \n", "Time": "Jun 8 '17", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "17"}, {"Question": "How to install pip on Windows?", "Answer": "\nTo use pip, it is not mandatory that you need to install pip in the system directly. You can use it through virtualenv. What you can do is follow these steps:\n\nDownload virtualenv tar.gz file from https://pypi.python.org/pypi/virtualenv\nUnzip it with 7zip or some other tool\n\nWe normally need to install Python packages for one particular project. So, now create a project folder, let\u2019s say myproject.\n\nCopy the virtualenv.py file from the decompressed folder of virtualenv, and paste inside the myproject folder\n\nNow create a virtual environment, let\u2019s say myvirtualenv as follows, inside the myproject folder:\npython virtualenv.py myvirtualenv\n\nIt will show you:\nNew python executable in myvirtualenv\\Scripts\\python.exe\nInstalling setuptools....................................done.\nInstalling pip.........................done.\n\nNow your virtual environment, myvirtualenv, is created inside your project folder. You might notice, pip is now installed inside you virtual environment. All you need to do is activate the virtual environment with the following command.\nmyvirtualenv\\Scripts\\activate\n\nYou will see the following at the command prompt:\n(myvirtualenv) PATH\\TO\\YOUR\\PROJECT\\FOLDER>pip install package_name\n\nNow you can start using pip, but make sure you have activated the virtualenv looking at the left of your prompt.\nThis is one of the easiest way to install pip i.e. inside virtual environment, but you need to have virtualenv.py file with you.\nFor more ways to install pip/virtualenv/virtualenvwrapper, you can refer to thegauraw.tumblr.com.\n", "Time": "Feb 6 '16", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "16"}, {"Question": "How to install pip on Windows?", "Answer": "\nI just wanted to add one more solution for those having issues installing setuptools from Windows 64-bit. The issue is discussed in this bug on python.org and is still unresolved as of the date of this comment. A simple workaround is mentioned and it works flawlessly. One registry change did the trick for me.\nLink: http://bugs.python.org/issue6792#\nSolution that worked for me...:\nAdd this registry setting for 2.6+ versions of Python:\n [HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Python\\PythonCore\\2.6\\InstallPath]\n @=\"C:\\\\Python26\\\\\"\n\nThis is most likely the registry setting you will already have for Python 2.6+:\n [HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\2.6\\InstallPath]\n @=\"C:\\\\Python26\\\\\"\n\nClearly, you will need to replace the 2.6 version with whatever version of Python you are running.\n", "Time": "Feb 6 '16", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "15"}, {"Question": "How to install pip on Windows?", "Answer": "\nUpdated at 2016 : Pip should already be included in Python 2.7.9+ or 3.4+, but if for whatever reason it is not there, you can use the following one-liner.\n\nDownload https://bootstrap.pypa.io/get-pip.py and run it with Administrator permission python get-pip.py (If you are on Linux, use sudo python get-pip.py)\n\nPS:\n\nThis should already be satisfied in most cases but, if necessary, be sure that your environment variable PATH includes Python's folders (for example, Python 2.7.x on Windows default install: C:\\Python27 and C:\\Python27\\Scripts, for Python 3.3x: C:\\Python33 and C:\\Python33\\Scripts, etc)\nI encounter same problem and then found such perhaps easiest way (one liner!) mentioned on official website here: http://www.pip-installer.org/en/latest/installing.html\n\nCan't believe there are so many lengthy (perhaps outdated?) answers out there. Feeling thankful to them but, please up-vote this short answer to help more new comers!\n", "Time": "Jan 16 '17", "Comment 1": "\nI believe you'll still need distribute or setuptools.\r\n                \r\n                    \u2013\u00a0Gringo Suave\nJan 18 '13 at 20:58\n", "Comment 2": "\nOn my system, I also needed to add C:\\Python33\\Scripts to the PATH.\r\n                \r\n                    \u2013\u00a0joshuanapoli\nMar 6 '13 at 17:52\n", "Comment 3": "\nYou forgot to mention you don't have firewall issues\r\n                \r\n                    \u2013\u00a0flywire\nMay 28 '18 at 7:09\n", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "15"}, {"Question": "How to install pip on Windows?", "Answer": "\nThe best way I found so far, is just two lines of code:\ncurl http://python-distribute.org/distribute_setup.py | python\ncurl https://raw.github.com/pypa/pip/master/contrib/get-pip.py | python\n\nIt was tested on Windows 8 with PowerShell, Cmd, and Git Bash (MinGW).\nAnd you probably want to add the path to your environment. It's somewhere like C:\\Python33\\Scripts.\n", "Time": "Feb 6 '16", "Comment 1": "\nCurl isn't shipped with windows.\r\n                \r\n                    \u2013\u00a0Gringo Suave\nMar 29 '13 at 21:37\n", "Comment 2": "\n@GringoSuave Curl is so commonly used, everyone should have it. If that's not preferred, these two scripts can be just downloaded with any browser directly.\r\n                \r\n                    \u2013\u00a0h--n\nMar 30 '13 at 17:24\n", "Comment 3": "\nCombine this with @Fernando's answer, stackoverflow.com/a/15294806/14420, for how to do the same without curl.\r\n                \r\n                    \u2013\u00a0matt wilkie\nApr 16 '13 at 5:04\n", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "14"}, {"Question": "How to install pip on Windows?", "Answer": "\nHere how to install pip with easy way.\n\ncopy and paste these content in a file as get-pip.py\ncopy and paste get-pip.py into python folder.C:\\Python27\nDouble click to get-pip.py file.it will install pip to your computer.\nNow you have to add C:\\Python27\\Scripts path to your enviroment variable.Because it includes pip.exe file.\nNow you are ready to use pip. Open cmd and type as pip install package_name\n\n", "Time": "Mar 29 '16", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "13"}, {"Question": "How to install pip on Windows?", "Answer": "\nPythonXY comes with pip included, among others.\n", "Time": "Jul 16 '13", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "12"}, {"Question": "How to install pip on Windows?", "Answer": "\nI use the cross-platform Anaconda package manager from continuum.io on Windows and it is reliable.  It has virtual environment management and a fully featured shell with common utilities (e.g. conda, pip).\n> conda install <package>               # access distributed binaries\n\n> pip install <package>                 # access PyPI packages \n\nconda also comes with binaries for libraries with non-Python dependencies, e.g. pandas, numpy, etc.  This proves useful particularly on Windows as it can be  hard to correctly compile C dependencies.\n", "Time": "Jan 18 '17", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "12"}, {"Question": "How to install pip on Windows?", "Answer": "\nI had some issues installing in different ways when I followed instructions here. I think it's very tricky to install in every Windows environment in the same way. In my case I need Python 2.6, 2.7 and 3.3 in the same machine for different purposes so that's why I think there're more problems.\nBut the following instructions worked perfectly for me, so might be depending on your environment you should try this one:\nhttp://docs.python-guide.org/en/latest/starting/install/win/\nAlso, due to the different environments I found incredible useful to use Virtual Environments, I had websites that use different libraries and it's much better to encapsulate them into a single folder, check out the instructions, briefly if PIP is installed you just install VirtualEnv:\npip install virtualenv\n\nInto the folder you have all your files run\nvirtualenv venv\n\nAnd seconds later you have a virtual environment with everything in venv folder, to activate it run venv/Scripts/activate.bat (deactivate the environment is easy, use deactivate.bat). Every library you install will end up in venv\\Lib\\site-packages and it's easy to move your whole environment somewhere.\nThe only downside I found is some code editors can't recognize this kind of environments, and you will see warnings in your code because imported libraries are not found. Of course there're tricky ways to do it but it would be nice editors keep in mind Virtual Environments are very normal nowadays.\nHope it helps.\n", "Time": "Jan 6 '14", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "10"}, {"Question": "How to install pip on Windows?", "Answer": "\n\nDownload script: https://raw.github.com/pypa/pip/master/contrib/get-pip.py\nSave it on drive somewhere like C:\\pip-script\\get-pip.py\nNavigate to that path from command prompt and run \" python get-pip.py \"\n\nGuide link: http://www.pip-installer.org/en/latest/installing.html#install-pip\nNote: Make sure scripts path like this (C:\\Python27\\Scripts) is added int %PATH% environment variable as well.\n", "Time": "Sep 24 '14", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "8"}, {"Question": "How to install pip on Windows?", "Answer": "\nIt's very simple:\nStep 1: wget https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py\nStep 2: wget https://raw.github.com/pypa/pip/master/contrib/get-pip.py\nStep 2: python ez_setup.py\nStep 3: python get-pip.py\n\n(Make sure your Python and Python script directory (for example, C:\\Python27 and C:\\Python27\\Scripts) are in the PATH.)\n", "Time": "Feb 6 '16", "Comment 1": "\nI don't see scripts folder on my machine I am using python 3.3\r\n                \r\n                    \u2013\u00a0Dejell\nDec 15 '13 at 10:19\n", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "5"}, {"Question": "How to install pip on Windows?", "Answer": "\nWorking as of Feb 04 2014 :):\nIf you have tried installing pip through the Windows installer file from http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip as suggested by @Colonel Panic, you might have installed the pip package manager successfully, but you might be unable to install any packages with pip. You might also have got the same SSL error as I got when I tried to install Beautiful Soup\u00a04 if you look in the pip.log file:\nDownloading/unpacking beautifulsoup4\n  Getting page https://pypi.python.org/simple/beautifulsoup4/\n  Could not fetch URL https://pypi.python.org/simple/beautifulsoup4/: **connection error: [Errno 1] _ssl.c:504: error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed**\n  Will skip URL https://pypi.python.org/simple/beautifulsoup4/ when looking for download links for beautifulsoup4\n\nThe problem is an issue with an old version of OpenSSL being incompatible with pip 1.3.1 and above versions. The easy workaround for now, is to install pip 1.2.1, which does not require SSL:\nInstalling Pip on Windows:\n\nDownload pip 1.2.1 from https://pypi.python.org/packages/source/p/pip/pip-1.2.1.tar.gz\nExtract the pip-1.2.1.tar.gz file\nChange directory to the extracted folder: cd <path to extracted folder>/pip-1.2.1\nRun python setup.py install\nNow make sure C:\\Python27\\Scripts is in PATH because pip is installed in the C:\\Python27\\Scripts directory unlike C:\\Python27\\Lib\\site-packages where Python packages are normally installed\n\nNow try to install any package using pip.\nFor example, to install the requests package using pip, run this from cmd:\npip install requests\n\nWhola! requests will be successfully installed and you will get a success message.\n", "Time": "Feb 6 '16", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "5"}, {"Question": "How to install pip on Windows?", "Answer": "\npip is already installed if you're using Python 2 >=2.7.9 or Python 3 >=3.4 binaries downloaded from python.org, but you'll need to upgrade pip.\nOn Windows upgrade can be done easily \nGo to Python command line and run below Python command\npython -m pip install -U pip\nInstalling with get-pip.py\nDownload get-pip.py in the same folder or any other folder of your choice. I am assuming you will download it in the same folder from you have python.exe file and run this command \npython get-pip.py\n\nPip's installation guide is pretty clean and simple.\nUsing this you should be able to get started with Pip in under two minutes.\n", "Time": "Aug 9 '16", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "5"}, {"Question": "How to install pip on Windows?", "Answer": "\nif you even have other problems with pip version you can try this \npip install --trusted-host pypi.python.org --upgrade pip\n\n", "Time": "Jun 14 '17", "Comment 1": "\nHow can they use pip if its not installed??\r\n                \r\n                    \u2013\u00a0john ktejik\nAug 21 '19 at 23:09\n\n\n\n", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "4"}, {"Question": "How to install pip on Windows?", "Answer": "\nInstalling Pip for Python2 and Python3\n\nDownload get-pip.py to a folder on your computer.\nOpen a command prompt and navigate to the folder containing get-pip.py.\nRun the following command:python get-pip.py, python3 get-pip.py or  python3.6 get-pip.py, depending on which version of python you want to install pip\nPip should be now installed!\n\n\nOld answer (still valid)\nHave you tried ?\npython -m ensurepip\n\nit's probably the easiest to install pip on any system.\n", "Time": "Apr 25 '19", "Comment 1": "\nIt may not be available for your OS or python version. I  updated the answer, give it a try.\r\n                \r\n                    \u2013\u00a0Pedro Lobito\nApr 25 '19 at 12:38\n", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "3"}, {"Question": "How to install pip on Windows?", "Answer": "\nSimple CMD way\nUse CURL to download get-pip.py\ncurl --http1.1 https://bootstrap.pypa.io/get-pip.py --output get-pip.py\n\nExecute downloaded python file\npython get-pip.py\n\nThen add C:\\Python37\\Scripts path to your environment variable. Assumes that there is a Python37 folder in your C drive, that folder name may varied according to the installed python version\nNow you can install python packages by running\npip install awesome_package_name\n\n", "Time": "Sep 13 '19", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "3"}, {"Question": "How to install pip on Windows?", "Answer": "\nJust download setuptools-15.2.zip (md5), from here https://pypi.python.org/pypi/setuptools#windows-simplified , and run ez_setup.py.\n", "Time": "May 5 '15", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "2"}, {"Question": "How to install pip on Windows?", "Answer": "\nAlternatively, you can get pip-Win which is an all-in-one installer for pip and virtualenv on Windows and its GUI.\n\nSwitch from one Python interpreter (i.e. version) to another (including py and pypy)\nSee all installed packages, and whether they are up-to-date\nInstall or upgrade a package, or upgrade pip itself\nCreate and delete virtual environments, and switch between them\nRun the IDLE or another Python script, with the selected interpreter\n\n", "Time": "Feb 6 '16", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "2"}, {"Question": "How to install pip on Windows?", "Answer": "\nNow, it is bundled with Python. You don't need to install it.\npip -V\n\nThis is how you can check whether pip is installed or not.\nIn rare case, if it is not installed, download get-pip.py file and run it with python as\npython get-pip.py\n\n", "Time": "Jan 29 '18", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/4750806/how-to-install-pip-on-windows", "UpVotes": "2"}, {"Question": "How can I upgrade specific packages using pip and a requirements file?", "Answer": "\nI'm not sure if it's exactly your problem, but in my case, I wasn't able to upgrade Django to 1.2.4 - I was always finishing with 1.2.3 version, so I uninstalled Django with:\n<virtualenv>/bin/pip uninstall Django\n\nThen I removed <virtualenv>/build/Django directory and finally I installed the proper version with:\n<virtualenv>/bin/pip install Django\n\nHope this will help.\n", "Time": "Apr 10 '14", "Comment 1": "\nThis is not the best practice. Use pip install Django -U or pip install Django --upgrade as described in @JoeyG 's answer.\r\n                \r\n                    \u2013\u00a0Ahmad\nJul 26 '18 at 3:05\n", "Comment 2": "\n@Ahmad agree. There should be a smooth update process in pip and virtual env.\r\n                \r\n                    \u2013\u00a0Parth Joshi\nJul 16 '19 at 17:45\n", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/4536103/how-can-i-upgrade-specific-packages-using-pip-and-a-requirements-file", "UpVotes": "58"}, {"Question": "How can I upgrade specific packages using pip and a requirements file?", "Answer": "\nI ran the following command and it upgraded from 1.2.3 to 1.4.0\npip install Django --upgrade\n\nShortcut for upgrade:\npip install Django -U\n\nNote: if the package you are upgrading has any requirements this command will additionally upgrade all the requirements to the latest versions available.  In recent versions of pip, you can prevent this behavior by specifying --upgrade-strategy only-if-needed.  With that flag, dependencies will not be upgraded unless the installed versions of the dependent packages no longer satisfy the requirements of the upgraded package.\n", "Time": "Nov 29 '16", "Comment 1": "\nThis for me updated all my packaged and totally messed up everything!!!! Documents states: --upgrade all packages to the newest available version. Is this correct or did I do something wrong?\r\n                \r\n                    \u2013\u00a0Prometheus\nNov 10 '14 at 12:12\n", "Comment 2": "\n@OrbiterFleet I needed to update \"requests\" so I did pip install Requests --upgrade and only \"requests\" was upgraded.  The description says \"upgrade all specified packages\" when I view the docs.\r\n                \r\n                    \u2013\u00a0harperville\nJan 28 '15 at 14:14\n", "Comment 3": "\nATTENTION, it also updates all dependencies and can mess up with everything. the best option is to uninstall and reinstall the package.\r\n                \r\n                    \u2013\u00a0marcelosalloum\nMay 7 '15 at 13:54\n", "Link": "https://stackoverflow.com//questions/4536103/how-can-i-upgrade-specific-packages-using-pip-and-a-requirements-file", "UpVotes": "1231"}, {"Question": "How can I upgrade specific packages using pip and a requirements file?", "Answer": "\naccording to pip docs example 3\npip install --upgrade django\n\nbut based on my experience, using this method will also upgrade any package related to it. example:\nAssume you want to upgrade somepackage that require django >= 1.2.4 using this kind of method it will also upgrade somepackage AND django to the newest update. Just to be safe do :\n# assume you want to keep django 1.2.4\npip install --upgrade somepackage django==1.2.4\n\nDoing this will upgrade somepackage and keeping django to 1.2.4 version\n", "Time": "Oct 15 '15", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/4536103/how-can-i-upgrade-specific-packages-using-pip-and-a-requirements-file", "UpVotes": "51"}, {"Question": "How can I upgrade specific packages using pip and a requirements file?", "Answer": "\nThe shortcut command for --upgrade:\npip install Django --upgrade\n\nIs:\npip install Django -U\n\n", "Time": "Aug 31 '14", "Comment 1": "\nHow about editing the existing answer to add this bit of information instead of an (incomplete) answer?\r\n                \r\n                    \u2013\u00a0a1an\nJun 2 '15 at 8:18\n", "Comment 2": "\n@a1an please suggest what extra info that you think should be added in a \"suggested edit\". Thanks\r\n                \r\n                    \u2013\u00a0Aaron Lelevier\nJun 2 '15 at 14:22\n", "Comment 3": "\nI mean you could edit the answer given by JoeyG, adding the shortcut option you provided in context there.\r\n                \r\n                    \u2013\u00a0a1an\nJun 3 '15 at 9:39\n", "Link": "https://stackoverflow.com//questions/4536103/how-can-i-upgrade-specific-packages-using-pip-and-a-requirements-file", "UpVotes": "32"}, {"Question": "How can I upgrade specific packages using pip and a requirements file?", "Answer": "\nIf you upgrade a package, the old one will be uninstalled.  \nA convenient way to do this is to use this pip-upgrader which also updates the versions in your requirements.txt file for the chosen packages (or all packages).\nInstallation\npip install pip-upgrader\n\nUsage\nActivate your virtualenv (important, because it will also install the new versions of upgraded packages in current virtualenv).\ncd into your project directory, then run:\npip-upgrade\n\nAdvanced usage\nIf the requirements are placed in a non-standard location, send them as arguments:\npip-upgrade path/to/requirements.txt\n\nIf you already know what package you want to upgrade, simply send them as arguments:\npip-upgrade -p django -p celery -p dateutil\n\nIf you need to upgrade to  pre-release / post-release version, add --prerelease argument to your command.\nFull disclosure: i wrote this package. Hope it helps.\n", "Time": "Apr 27 '17", "Comment 1": "\nis there an option to upgrade all packages at once (ie, without listing them) with this approach?\r\n                \r\n                    \u2013\u00a0Bjorks number one fan\nMay 18 '18 at 14:37\n", "Comment 2": "\n@MikePalmice yes: pip-upgrade -p all will upgrade all your packages and update requirements file without needing any input from you.\r\n                \r\n                    \u2013\u00a0Simion Agavriloaei\nMay 21 '18 at 7:30\n\n\n\n", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/4536103/how-can-i-upgrade-specific-packages-using-pip-and-a-requirements-file", "UpVotes": "17"}, {"Question": "How can I upgrade specific packages using pip and a requirements file?", "Answer": "\nIf you only want to upgrade one specific package called somepackage, the command you should use in recent versions of pip is \npip install --upgrade --upgrade-strategy only-if-needed somepackage\n\nThis is very useful when you developed an application in django that currently will only work with a specific version of django (say Django=1.9.x) and want to upgrade some dependent package with a bug-fix/new feature and the upgraded package depends on django (but works with say any version of django after 1.5).  The default behavior of pip install --upgrade django-some-package would be to upgrade django to the latest version available which could otherwise break your application, though with the --upgrade-strategy only-if-needed dependent packages will now only be upgraded as necessary.\n", "Time": "Nov 29 '16", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/4536103/how-can-i-upgrade-specific-packages-using-pip-and-a-requirements-file", "UpVotes": "15"}, {"Question": "How can I upgrade specific packages using pip and a requirements file?", "Answer": "\nNormally, pip will clean up after itself and remove the contents of the build directory. The only time it doesn't do this is if:\n\nYou used the --no-install option\nYou are using editable packages\nThe installation was cancelled or was otherwise interrupted.\n\nIn all other cases, you shouldn't have build directory that's clogging your environment.\n", "Time": "May 4 '12", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/4536103/how-can-i-upgrade-specific-packages-using-pip-and-a-requirements-file", "UpVotes": "4"}, {"Question": "How can I upgrade specific packages using pip and a requirements file?", "Answer": "\nthat solved for me the issue \"pip install -I --upgrade psutil --force\" \nafterwards just uninstall psutil with the new version and hop you can suddenly install the older version (:\n", "Time": "Jul 14 '19", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/4536103/how-can-i-upgrade-specific-packages-using-pip-and-a-requirements-file", "UpVotes": "0"}, {"Question": "How can I upgrade specific packages using pip and a requirements file?", "Answer": "\nI use this: \npip3 install -r  requirements.txt  \n\n", "Time": "Oct 4 '19", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/4536103/how-can-i-upgrade-specific-packages-using-pip-and-a-requirements-file", "UpVotes": "0"}, {"Question": "Proper way to declare custom exceptions in modern Python?", "Answer": "\nMaybe I missed the question, but why not:\nclass MyException(Exception):\n    pass\n\nEdit: to override something (or pass extra args), do this:\nclass ValidationError(Exception):\n    def __init__(self, message, errors):\n\n        # Call the base class constructor with the parameters it needs\n        super(ValidationError, self).__init__(message)\n\n        # Now for your custom code...\n        self.errors = errors\n\nThat way you could pass dict of error messages to the second param, and get to it later with e.errors\n\nPython 3 Update: In Python 3+, you can use this slightly more compact use of super():\nclass ValidationError(Exception):\n    def __init__(self, message, errors):\n\n        # Call the base class constructor with the parameters it needs\n        super().__init__(message)\n\n        # Now for your custom code...\n        self.errors = errors\n\n", "Time": "Mar 26 '18", "Comment 1": "\nHowever an exception defined like this would not be pickable; see the discussion here stackoverflow.com/questions/16244923/\u2026\r\n                \r\n                    \u2013\u00a0jiakai\nAug 1 '17 at 2:54\n", "Comment 2": "\n@jiakai means \"picklable\". :-)\r\n                \r\n                    \u2013\u00a0Robino\nSep 15 '17 at 13:39\n\n\n\n", "Comment 3": "\nFollowing the documentation of python for user-defined exceptions, the names that are mentioned in the __init__ function are incorrect. Instead of (self,message,error) it is (self,expression,message). The attribute expression is the input expression in which the error occurred and the message is an explanation of the error.\r\n                \r\n                    \u2013\u00a0ddleon\nFeb 27 at 15:13\n\n\n\n", "Link": "https://stackoverflow.com//questions/1319615/proper-way-to-declare-custom-exceptions-in-modern-python", "UpVotes": "1254"}, {"Question": "Proper way to declare custom exceptions in modern Python?", "Answer": "\nWith modern Python Exceptions, you don't need to abuse .message, or override .__str__() or .__repr__() or any of it. If all you want is an informative message when your exception is raised, do this:\nclass MyException(Exception):\n    pass\n\nraise MyException(\"My hovercraft is full of eels\")\n\nThat will give a traceback ending with MyException: My hovercraft is full of eels.\nIf you want more flexibility from the exception, you could pass a dictionary as the argument:\nraise MyException({\"message\":\"My hovercraft is full of animals\", \"animal\":\"eels\"})\n\nHowever, to get at those details in an except block is a bit more complicated. The details are stored in the args attribute, which is a list. You would need to do something like this:\ntry:\n    raise MyException({\"message\":\"My hovercraft is full of animals\", \"animal\":\"eels\"})\nexcept MyException as e:\n    details = e.args[0]\n    print(details[\"animal\"])\n\nIt is still possible to pass in multiple items to the exception and access them via tuple indexes, but this is highly discouraged (and was even intended for deprecation a while back). If you do need more than a single piece of information and the above method is not sufficient for you, then you should subclass Exception as described in the tutorial.\nclass MyError(Exception):\n    def __init__(self, message, animal):\n        self.message = message\n        self.animal = animal\n    def __str__(self):\n        return self.message\n\n", "Time": "May 10 '18", "Comment 1": "\n\"but this will be deprecated in the future\" - is this still intended for deprecation? Python 3.7 still seems to happily accept Exception(foo, bar, qux).\r\n                \r\n                    \u2013\u00a0mtraceur\nApr 20 '18 at 22:36\n\n\n\n", "Comment 2": "\nIt haven't seen any recent work to depricate it since the last attempt failed due to the pain of transitioning, but that usage is still discouraged. I will update my answer to reflect that.\r\n                \r\n                    \u2013\u00a0frnknstn\nMay 2 '18 at 8:20\n", "Comment 3": "\n@frnknstn, why it is discouraged? Looks like a nice idiom for me.\r\n                \r\n                    \u2013\u00a0neves\nMay 8 '18 at 17:48\n", "Link": "https://stackoverflow.com//questions/1319615/proper-way-to-declare-custom-exceptions-in-modern-python", "UpVotes": "473"}, {"Question": "Proper way to declare custom exceptions in modern Python?", "Answer": "\n\n\"Proper way to declare custom exceptions in modern Python?\"\n\nThis is fine, unless your exception is really a type of a more specific exception:\nclass MyException(Exception):\n    pass\n\nOr better (maybe perfect), instead of pass give a docstring:\nclass MyException(Exception):\n    \"\"\"Raise for my specific kind of exception\"\"\"\n\nSubclassing Exception Subclasses\nFrom the docs\n\nException\nAll built-in, non-system-exiting exceptions are derived from this class. \n  All user-defined exceptions should also be derived from this\n  class.\n\nThat means that if your exception is a type of a more specific exception, subclass that exception instead of the generic Exception (and the result will be that you still derive from Exception as the docs recommend). Also, you can at least provide a docstring (and not be forced to use the pass keyword):\nclass MyAppValueError(ValueError):\n    '''Raise when my specific value is wrong'''\n\nSet attributes you create yourself with a custom __init__. Avoid passing a dict as a positional argument, future users of your code will thank you. If you use the deprecated message attribute, assigning it yourself will avoid a DeprecationWarning:\nclass MyAppValueError(ValueError):\n    '''Raise when a specific subset of values in context of app is wrong'''\n    def __init__(self, message, foo, *args):\n        self.message = message # without this you may get DeprecationWarning\n        # Special attribute you desire with your Error, \n        # perhaps the value that caused the error?:\n        self.foo = foo         \n        # allow users initialize misc. arguments as any other builtin Error\n        super(MyAppValueError, self).__init__(message, foo, *args) \n\nThere's really no need to write your own __str__ or __repr__. The builtin ones are very nice, and your cooperative inheritance ensures that you use it.\nCritique of the top answer\n\nMaybe I missed the question, but why not:\n\nclass MyException(Exception):\n    pass\n\nAgain, the problem with the above is that in order to catch it, you'll either have to name it specifically (importing it if created elsewhere) or catch Exception, (but you're probably not prepared to handle all types of Exceptions, and you should only catch exceptions you are prepared to handle). Similar criticism to the below, but additionally that's not the way to initialize via super, and you'll get a DeprecationWarning if you access the message attribute:\n\nEdit: to override something (or pass extra args), do this:\n\nclass ValidationError(Exception):\n    def __init__(self, message, errors):\n\n        # Call the base class constructor with the parameters it needs\n        super(ValidationError, self).__init__(message)\n\n        # Now for your custom code...\n        self.errors = errors\n\n\nThat way you could pass dict of error messages to the second param, and get to it later with e.errors\n\nIt also requires exactly two arguments to be passed in (aside from the self.) No more, no less. That's an interesting constraint that future users may not appreciate. \nTo be direct - it violates Liskov substitutability.\nI'll demonstrate both errors:\n>>> ValidationError('foo', 'bar', 'baz').message\n\nTraceback (most recent call last):\n  File \"<pyshell#10>\", line 1, in <module>\n    ValidationError('foo', 'bar', 'baz').message\nTypeError: __init__() takes exactly 3 arguments (4 given)\n\n>>> ValidationError('foo', 'bar').message\n__main__:1: DeprecationWarning: BaseException.message has been deprecated as of Python 2.6\n'foo'\n\nCompared to: \n>>> MyAppValueError('foo', 'FOO', 'bar').message\n'foo'\n\n", "Time": "Feb 23 '17", "Comment 1": "\nHello from 2018! BaseException.message is gone in Python 3, so the critique only holds for old versions, right?\r\n                \r\n                    \u2013\u00a0Kos\nJan 3 '18 at 18:21\n", "Comment 2": "\n@Kos The critique about Liskov Substitutability is still valid. The semantics of the first argument as a \"message\" are also arguably questionable, but I don't think I'll argue the point. I'll give this more of a look when I have more free time.\r\n                \r\n                    \u2013\u00a0Aaron Hall\u2666\nJan 3 '18 at 19:02\n", "Comment 3": "\nFWIW, for Python 3 (at least for 3.6+), one would redefine the __str__ method of MyAppValueError instead of relying on the message attribute\r\n                \r\n                    \u2013\u00a0Jacquot\nMar 18 '18 at 23:39\n", "Link": "https://stackoverflow.com//questions/1319615/proper-way-to-declare-custom-exceptions-in-modern-python", "UpVotes": "191"}, {"Question": "Proper way to declare custom exceptions in modern Python?", "Answer": "\nsee how exceptions work by default if one vs more attributes are used (tracebacks omitted):\n>>> raise Exception('bad thing happened')\nException: bad thing happened\n\n>>> raise Exception('bad thing happened', 'code is broken')\nException: ('bad thing happened', 'code is broken')\n\nso you might want to have a sort of \"exception template\", working as an exception itself, in a compatible way:\n>>> nastyerr = NastyError('bad thing happened')\n>>> raise nastyerr\nNastyError: bad thing happened\n\n>>> raise nastyerr()\nNastyError: bad thing happened\n\n>>> raise nastyerr('code is broken')\nNastyError: ('bad thing happened', 'code is broken')\n\nthis can be done easily with this subclass\nclass ExceptionTemplate(Exception):\n    def __call__(self, *args):\n        return self.__class__(*(self.args + args))\n# ...\nclass NastyError(ExceptionTemplate): pass\n\nand if you don't like that default tuple-like representation, just add __str__ method to the ExceptionTemplate class, like:\n    # ...\n    def __str__(self):\n        return ': '.join(self.args)\n\nand you'll have\n>>> raise nastyerr('code is broken')\nNastyError: bad thing happened: code is broken\n\n", "Time": "Aug 7 '13", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/1319615/proper-way-to-declare-custom-exceptions-in-modern-python", "UpVotes": "49"}, {"Question": "Proper way to declare custom exceptions in modern Python?", "Answer": "\nAs of Python 3.8 (2018, https://docs.python.org/dev/whatsnew/3.8.html), the recommended method is still:\nclass CustomExceptionName(Exception):\n    \"\"\"Exception raised when very uncommon things happen\"\"\"\n    pass\n\nPlease don't forget to document, why a custom exception is neccessary!\nIf you need to, this is the way to go for exceptions with more data:\nclass CustomExceptionName(Exception):\n    \"\"\"Still an exception raised when uncommon things happen\"\"\"\n    def __init__(self, message, payload=None):\n        self.message = message\n        self.payload = payload # you could add more args\n    def __str__(self):\n        return str(self.message) # __str__() obviously expects a string to be returned, so make sure not to send any other data types\n\nand fetch them like:\ntry:\n    raise CustomExceptionName(\"Very bad mistake.\", \"Forgot upgrading from Python 1\")\nexcept CustomExceptionName as error:\n    print(str(error)) # Very bad mistake\n    print(\"Detail: {}\".format(error.payload)) # Detail: Forgot upgrading from Python 1\n\npayload=None is important to make it pickle-able. Before dumping it, you have to call error.__reduce__(). Loading will work as expected.\nYou maybe should investigate in finding a solution using pythons return statement if you need much data to be transferred to some outer structure. This seems to be clearer/more pythonic to me. Advanced exceptions are heavily used in Java, which can sometimes be annoying, when using a framework and having to catch all possible errors.\n", "Time": "Apr 28 '19", "Comment 1": "\nAt the very least, the current docs indicate this is the way to do it (at least without the __str__) rather than other answers that use super().__init__(...).. Just a shame that overrides for __str__ and __repr__ are probably necessary just for better \"default\" serializing.\r\n                \r\n                    \u2013\u00a0kevlarr\nMar 26 '19 at 16:46\n\n\n\n", "Comment 2": "\nHonest question: Why is it important for exceptions to be pickle-able? What are the use cases for dumping and loading exceptions?\r\n                \r\n                    \u2013\u00a0Roel Schroeven\nAug 6 '19 at 15:21\n", "Comment 3": "\n@RoelSchroeven: I had to parallelize code once. Ran fine single process, but aspects of some of its classes were not serializable (lambda function being passed as objects). Took me some time figuring it out & fixing it. Meaning someone later may end up needing your code to be serialize, be unable to do it, and have to dig up why... My issue wasn't unpickeable errors, but I can see it causing similar problems.\r\n                \r\n                    \u2013\u00a0logicOnAbstractions\nOct 6 '19 at 2:58\n", "Link": "https://stackoverflow.com//questions/1319615/proper-way-to-declare-custom-exceptions-in-modern-python", "UpVotes": "28"}, {"Question": "Proper way to declare custom exceptions in modern Python?", "Answer": "\nYou should override __repr__ or __unicode__ methods instead of using message, the args you provide when you construct the exception will be in the args attribute of the exception object.\n", "Time": "Aug 18 '17", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/1319615/proper-way-to-declare-custom-exceptions-in-modern-python", "UpVotes": "17"}, {"Question": "Proper way to declare custom exceptions in modern Python?", "Answer": "\nNo, \"message\" is not forbidden. It's just deprecated. You application will work fine with using message. But you may want to get rid of the deprecation error, of course.\nWhen you create custom Exception classes for your application, many of them do not subclass just from Exception, but from others, like ValueError or similar. Then you have to adapt to their usage of variables.\nAnd if you have many exceptions in your application it's usually a good idea to have a common custom base class for all of them, so that users of your modules can do\ntry:\n    ...\nexcept NelsonsExceptions:\n    ...\n\nAnd in that case you can do the __init__ and __str__ needed there, so you don't have to repeat it for every exception. But simply calling the message variable something else than message does the trick.\nIn any case, you only need the __init__ or __str__ if you do something different from what Exception itself does. And because if the deprecation, you then need both, or you get an error. That's not a whole lot of extra code you need per class. ;)\n", "Time": "Aug 23 '09", "Comment 1": "\nIt's interesting that Django exceptions don't inherit from a common base. docs.djangoproject.com/en/2.2/_modules/django/core/exceptions Do you have a good example when catching all exceptions from a specific application is needed? (maybe it is useful only for some specific types of applications).\r\n                \r\n                    \u2013\u00a0Yaroslav Nikitenko\nJun 10 '19 at 20:05\n", "Comment 2": "\nI found a good article on this topic, julien.danjou.info/python-exceptions-guide . I think that Exceptions should be subclassed primarily domain-based, not application-based. When your app is about HTTP protocol, you derive from HTTPError. When part of your app is TCP, you derive that part's exceptions from TCPError. But if your app spans a lot of domains (file, permissions, etc), the reason to have a MyBaseException diminishes. Or is it to protect from 'layer violation'?\r\n                \r\n                    \u2013\u00a0Yaroslav Nikitenko\nJun 10 '19 at 20:44\n", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/1319615/proper-way-to-declare-custom-exceptions-in-modern-python", "UpVotes": "8"}, {"Question": "Proper way to declare custom exceptions in modern Python?", "Answer": "\nSee a very good article \"The definitive guide to Python exceptions\". The basic principles are:\n\nAlways inherit from (at least) Exception.\nAlways call BaseException.__init__ with only one argument.\nWhen building a library, define a base class inheriting from Exception.\nProvide details about the error. \nInherit from builtin exceptions types when it makes sense.\n\nThere is also information on organizing (in modules) and wrapping exceptions, I recommend to read the  guide.\n", "Time": "Jun 10 '19", "Comment 1": "\nThis is a good example of why on SO I usually check the most upvoted answer, but the most recent ones as well. Usefull addition, thanks.\r\n                \r\n                    \u2013\u00a0logicOnAbstractions\nOct 5 '19 at 18:09\n", "Comment 2": "\nAlways call BaseException.__init__ with only one argument. Seems like unneeded constraint, since it actually accepts any number of arguments.\r\n                \r\n                    \u2013\u00a0Eugene Yarmash\nFeb 29 at 13:12\n\n\n\n", "Comment 3": "\n@EugeneYarmash I agree, now I don't understand that. I don't use it anyway. Maybe I should reread the article and expand my answer.\r\n                \r\n                    \u2013\u00a0Yaroslav Nikitenko\nFeb 29 at 13:56\n", "Link": "https://stackoverflow.com//questions/1319615/proper-way-to-declare-custom-exceptions-in-modern-python", "UpVotes": "5"}, {"Question": "Proper way to declare custom exceptions in modern Python?", "Answer": "\nTry this Example\nclass InvalidInputError(Exception):\n    def __init__(self, msg):\n        self.msg = msg\n    def __str__(self):\n        return repr(self.msg)\n\ninp = int(input(\"Enter a number between 1 to 10:\"))\ntry:\n    if type(inp) != int or inp not in list(range(1,11)):\n        raise InvalidInputError\nexcept InvalidInputError:\n    print(\"Invalid input entered\")\n\n", "Time": "Jul 22 '18", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/1319615/proper-way-to-declare-custom-exceptions-in-modern-python", "UpVotes": "2"}, {"Question": "Proper way to declare custom exceptions in modern Python?", "Answer": "\nTo define your own exceptions correctly, there are a few best practices that you need to follow:\n\nDefine a base class inheriting from Exception. This will allow to catch any exception related to the project (more specific exceptions should inherit from it):\nclass MyProjectError(Exception):\n    \"\"\"A base class for MyProject exceptions.\"\"\"\n\nOrganizing these exception classes in a separate module (e.g. exceptions.py) is generally a good idea.\nTo pass extra arguments to your exception, define a custom __init__() method with optional arguments. Call the base class's __init__() passing any positional arguments to it (remember that BaseException/Exception expect any number of positional arguments):\nclass CustomError(MyProjectError):\n    def __init__(self, *args, extra_arg=None):\n        super().__init__(*args)\n        self.extra_arg = extra_arg\n\nTo raise such exception with an extra argument you can use:\nraise CustomError('Something bad happened', extra_arg='foo')\n\nThis design actually adheres to the Liskov substitution principle since you can replace an instance of a base exception class with an instance of a derived exception class.\n\n", "Time": "Feb 29 at", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/1319615/proper-way-to-declare-custom-exceptions-in-modern-python", "UpVotes": "0"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nThere isn't a built-in flag yet, but you can use\npip list --outdated --format=freeze | grep -v '^\\-e' | cut -d = -f 1  | xargs -n1 pip install -U\n\nNote: there are infinite potential variations for this. I'm trying to keep this answer short and simple, but please do suggest variations in the comments!\nIn older version of pip, you can use this instead:\npip freeze --local | grep -v '^\\-e' | cut -d = -f 1  | xargs -n1 pip install -U\n\nThe grep is to skip editable (\"-e\") package definitions, as suggested by @jawache. (Yes, you could replace grep+cut with sed or awk or perl or...).\nThe -n1 flag for xargs prevents stopping everything if updating one package fails (thanks @andsens).\n", "Time": "Aug 6 '18", "Comment 1": "\nRight :( The issue now lives at github.com/pypa/pip/issues/59 . But every suggestion seems to be answered with \"Yeah, but I'm too sure if X is the right way to do Y\"... Now is better than never? Practicality beats purity? :(\r\n                \r\n                    \u2013\u00a0rbp\nAug 12 '11 at 8:40\n", "Comment 2": "\nIt also prints those packages that were installed with a normal package manager (like apt-get or Synaptic). If I execute this pip install -U, it will update all packages. I'm afraid it can cause some conflict with apt-get.\r\n                \r\n                    \u2013\u00a0Jabba\nSep 13 '11 at 4:11\n", "Comment 3": "\nHow about changing grep to: egrep -v '^(\\-e|#)' (i get this line when running it on ubuntu 12.10: \"## FIXME: could not find svn URL in dependency_links for this package:\".\r\n                \r\n                    \u2013\u00a0LasseValentini\nMar 5 '13 at 14:29\n", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "2152"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nYou can use the following Python code. Unlike pip freeze, this will not print warnings and FIXME errors.\nFor pip < 10.0.1\nimport pip\nfrom subprocess import call\n\npackages = [dist.project_name for dist in pip.get_installed_distributions()]\ncall(\"pip install --upgrade \" + ' '.join(packages), shell=True)\n\nFor pip >= 10.0.1\nimport pkg_resources\nfrom subprocess import call\n\npackages = [dist.project_name for dist in pkg_resources.working_set]\ncall(\"pip install --upgrade \" + ' '.join(packages), shell=True)\n\n", "Time": "Sep 17 '18", "Comment 1": "\nThis works amazingly well\u2026  It's always so satisfying when a task takes a REALLY long time\u2026  and gives you a bunch of new stuff!  PS: Run it as root if you're on OS X!\r\n                \r\n                    \u2013\u00a0Alex Gray\nDec 31 '11 at 4:13\n\n\n\n", "Comment 2": "\nIs there no way to install using pip without calling a subprocess?  Something like import pip pip.install('packagename')?\r\n                \r\n                    \u2013\u00a0endolith\nMar 6 '12 at 16:18\n", "Comment 3": "\nI wrapped this up in a fabfile.py. Thanks!\r\n                \r\n                    \u2013\u00a0Josh K\nApr 29 '13 at 21:54\n", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "657"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nTo upgrade all local packages; you could use pip-review:\n$ pip install pip-review\n$ pip-review --local --interactive\n\n\npip-review is a fork of pip-tools. See pip-tools issue mentioned by @knedlsepp. pip-review package works but pip-tools package no longer works.\npip-review works on Windows since version 0.5.\n", "Time": "May 23 '17", "Comment 1": "\n@hauzer: It doesn't support Python 3. Though it might be a bug\r\n                \r\n                    \u2013\u00a0jfs\nApr 25 '14 at 0:27\n\n\n\n", "Comment 2": "\n@mkoistinen It's a good tool but until it's merged in PIP it means installing something additional which not everyone may desire to do.\r\n                \r\n                    \u2013\u00a0Wernight\nJul 22 '14 at 8:50\n", "Comment 3": "\n@Daniel: pip-tools no longer works, pip-review (fork of pip-tools) works.\r\n                \r\n                    \u2013\u00a0jfs\nOct 12 '15 at 6:00\n", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "629"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nWorks on Windows. Should be good for others too.\n($ is whatever directory you're in, in command prompt. eg. C:/Users/Username>)\ndo\n$ pip freeze > requirements.txt\n\nopen the text file, replace the == with >= , and execute \n$ pip install -r requirements.txt --upgrade\n\nIf you have a problem with a certain package stalling the upgrade (numpy sometimes), just go to the directory ($), comment out the name (add a # before it) and run the upgrade again. You can later uncomment that section back. This is also great for copying python global environments.\n\nAnother way:\nI also like the pip-review method:\npy2\n$ pip install pip-review\n\n$ pip-review --local --interactive\n\npy3\n$ pip3 install pip-review\n\n$ py -3 -m pip_review --local --interactive\n\nYou can select 'a' to upgrade all packages; if one upgrade fails, run it again and it continues at the next one.\n", "Time": "Jul 24 '19", "Comment 1": "\nYou should remove requirements.txt's =={version}. For example: python-dateutil==2.4.2 to python-dateutil for all lines.\r\n                \r\n                    \u2013\u00a0youngminz\nMay 15 '16 at 5:28\n", "Comment 2": "\nI found that this didn't actually upgrade the packages on macOS.\r\n                \r\n                    \u2013\u00a0jkooker\nMar 8 '17 at 14:42\n", "Comment 3": "\n@youngminz I would recommand a quick 'Replace all \"==\" > \">=\" ' in your editor/ide before running 'pip install...' to fix this\r\n                \r\n                    \u2013\u00a0Amaury Liet\nMar 16 '17 at 11:12\n\n\n\n", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "318"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nWindows version after consulting excellent documentation for FOR by Rob van der Woude\nfor /F \"delims===\" %i in ('pip freeze -l') do pip install -U %i\n\n", "Time": "Apr 26 '18", "Comment 1": "\nfor /F \"delims= \" %i in ('pip list --outdated') do pip install -U %i        Quicker since it'll only try and update \"outdated\" packages\r\n                \r\n                    \u2013\u00a0Refael Ackermann\nApr 19 '16 at 19:30\n\n\n\n", "Comment 2": "\n@RefaelAckermann I suspect this will be slower than the original :) To know which packages are outdated pip has to first check what's the latest version of each package. It does exactly the same as the first step when updating and does not proceed if there's no newer version available. However in your version pip will check versions two times, the first time to establish the list of outdated packages and the second time when updating packages on this list.\r\n                \r\n                    \u2013\u00a0Piotr Dobrogost\nJan 17 '17 at 9:22\n", "Comment 3": "\n@RefaelAckermann Spinning up pip is order of magnitude faster than checking version of a package over network so that's number of checks which should be optimized not number of spin ups. Mine makes n checks, yours makes n+m checks.\r\n                \r\n                    \u2013\u00a0Piotr Dobrogost\nJan 18 '17 at 14:38\n\n\n\n", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "126"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nUse pipupgrade!\n$ pip install pipupgrade\n$ pipupgrade --latest --yes\n\npipupgrade helps you upgrade your system, local or packages from a requirements.txt file! It also selectively upgrades packages that don't break change. pipupgrade also ensures to upgrade packages present within multiple Python environments. Compatible with Python2.7+, Python3.4+ and pip9+, pip10+, pip18+, pip19+.\n\nNOTE: I'm the author of the tool.\n", "Time": "May 10 '19", "Comment 1": "\nThis method has much cleaner output than @rbp's answer\r\n                \r\n                    \u2013\u00a0Gaia\nJan 27 '19 at 16:52\n\n\n\n", "Comment 2": "\nNice idea, but it's stuck at Checking... forever when I tried it.\r\n                \r\n                    \u2013\u00a0CGFoX\nMar 22 '19 at 6:46\n", "Comment 3": "\nJust installed it and also stuck at checking [0;93mChecking...[0m\r\n                \r\n                    \u2013\u00a0Chris\nMay 29 '19 at 17:11\n\n\n\n", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "100"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nYou can just print the packages that are outdated\npip freeze | cut -d = -f 1 | xargs -n 1 pip search | grep -B2 'LATEST:'\n\n", "Time": "Jun 10 '11", "Comment 1": "\nInside a virtualenv, I do it like this: pip freeze --local | cut -d = -f 1 | xargs -n 1 pip search | grep -B2 'LATEST:'\r\n                \r\n                    \u2013\u00a0Jeremy Blanchard\nMar 28 '12 at 19:46\n", "Comment 2": "\nNowadays you can also do that with python -m pip list outdated (though it's not in requirements format).\r\n                \r\n                    \u2013\u00a0Jacktose\nOct 28 '16 at 18:22\n\n\n\n", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "73"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nThis option seems to me more straightforward and readable:\npip install -U `pip list --outdated | awk 'NR>2 {print $1}'`\n\n\nThe explanation is that pip list --outdated outputs a list of all the outdated packages in this format: \nPackage   Version Latest Type \n--------- ------- ------ -----\nfonttools 3.31.0  3.32.0 wheel\nurllib3   1.24    1.24.1 wheel\nrequests  2.20.0  2.20.1 wheel\n\nIn the awk command, NR>2 skips the first two records (lines) and {print $1} selects the first word of each line (as suggested by SergioAraujo, I removed tail -n +3 since awk can indeed handle skipping records).\n", "Time": "Feb 25 at", "Comment 1": "\nIf one upgrade fails, none of the upgrades happen.\r\n                \r\n                    \u2013\u00a0Boris\nNov 11 '18 at 14:19\n\n\n\n", "Comment 2": "\nyou can avoid tail awk 'NR>2 {print $1}' cleanses the output for you\r\n                \r\n                    \u2013\u00a0SergioAraujo\nFeb 24 at 19:25\n\n\n\n", "Comment 3": "\n@SergioAraujo, this makes the solution looks also cleaner, thanks for the tip!\r\n                \r\n                    \u2013\u00a0Marc\nFeb 25 at 17:10\n", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "65"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nThe following one-liner might prove of help:\n(pip > 20.0)\npip list --format freeze --outdated | sed 's/=.*//g' | xargs -n1 pip install -U\n\nOlder Versions:\npip list --format freeze --outdated | sed 's/(.*//g' | xargs -n1 pip install -U\n\n\nxargs -n1 keeps going if an error occurs. \nIf you need more \"fine grained\" control over what is omitted and what raises an error you should not add the -n1 flag and explicitly define the errors to ignore, by \"piping\" the following line for each separate error:\n| sed 's/^<First characters of the error>.*//'\nHere is a working example:\npip list --format freeze --outdated | sed 's/=.*//g' | sed 's/^<First characters of the first error>.*//' | sed 's/^<First characters of the second error>.*//' | xargs pip install -U\n\n", "Time": "Jan 27 at", "Comment 1": "\nHad to add filters for lines beginning with 'Could' and 'Some' because apparently pip sends warnings to stdout :(\r\n                \r\n                    \u2013\u00a0Chip Camden\nAug 13 '15 at 23:03\n", "Comment 2": "\nOK, this is fair: You can add as many | sed 's/^<First characters of the error>.*//' as needed. Thank you!\r\n                \r\n                    \u2013\u00a0raratiru\nNov 3 '15 at 0:31\n\n\n\n", "Comment 3": "\nOr: pip list --outdated | cut -d ' ' -f 1 | xargs -n 1 pip install --upgrade\r\n                \r\n                    \u2013\u00a0Jens\nDec 9 '15 at 21:15\n", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "64"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nMore Robust Solution\nFor pip3 use this:\npip3 freeze --local |sed -rn 's/^([^=# \\t\\\\][^ \\t=]*)=.*/echo; echo Processing \\1 ...; pip3 install -U \\1/p' |sh\n\nFor pip, just remove the 3s as such:\npip freeze --local |sed -rn 's/^([^=# \\t\\\\][^ \\t=]*)=.*/echo; echo Processing \\1 ...; pip install -U \\1/p' |sh\n\nOSX Oddity\nOSX, as of July 2017, ships with a very old version of sed (a dozen years old).  To get extended regular expressions, use -E instead of -r in the solution above.\nSolving Issues with Popular Solutions\nThis solution is well designed and tested1, whereas there are problems with even the most popular solutions.\n\nPortability issues due to changing pip command line features\nCrashing of xargs because common pip or pip3 child process failures\nCrowded logging from the raw xargs output\nRelying on a Python-to-OS bridge while potentially upgrading it3\n\nThe above command uses the simplest and most portable pip syntax in combination with sed and sh to overcome these issues completely.  Details of sed operation can be scrutinized with the commented version2.\n\nDetails\n[1] Tested and regularly used in a Linux 4.8.16-200.fc24.x86_64 cluster and tested on five other Linux/Unix flavors.  It also runs on Cygwin64 installed on Windows 10.  Testing on iOS is needed.\n[2] To see the anatomy of the command more clearly, this is the exact equivalent of the above pip3 command with comments: \n# match lines from pip's local package list output\n# that meet the following three criteria and pass the\n# package name to the replacement string in group 1.\n# (a) Do not start with invalid characters\n# (b) Follow the rule of no white space in the package names\n# (c) Immediately follow the package name with an equal sign\nsed=\"s/^([^=# \\t\\\\][^ \\t=]*)=.*\"\n\n# separate the output of package upgrades with a blank line\nsed=\"$sed/echo\"\n\n# indicate what package is being processed\nsed=\"$sed; echo Processing \\1 ...\"\n\n# perform the upgrade using just the valid package name\nsed=\"$sed; pip3 install -U \\1\"\n\n# output the commands\nsed=\"$sed/p\"\n\n# stream edit the list as above\n# and pass the commands to a shell\npip3 freeze --local |sed -rn \"$sed\" |sh\n\n[3] Upgrading a Python or PIP component that is also used in the upgrading of a Python or PIP component can be a potential cause of a deadlock or package database corruption.\n", "Time": "Jul 30 '17", "Comment 1": "\nanother way to overcome the jurassic BSD sed of OS X is to use gsed (GNU sed) instead. To get it, brew install gnu-sed\r\n                \r\n                    \u2013\u00a0Walter Tross\nJan 9 '19 at 7:33\n\n\n\n", "Comment 2": "\n@WalterTross ... Jurassic ... good adjective use. So we now have two ways to group update pip packages with a nice audit trail on the terminal. (1) Use the -E option as in the answer and (2) install gsed to leave the Jurassic period.\r\n                \r\n                    \u2013\u00a0Douglas Daseeco\nJan 9 '19 at 8:13\n", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "49"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nThis seems more concise.\npip list --outdated | cut -d ' ' -f1 | xargs -n1 pip install -U\n\nExplanation:\npip list --outdated gets lines like these\nurllib3 (1.7.1) - Latest: 1.15.1 [wheel]\nwheel (0.24.0) - Latest: 0.29.0 [wheel]\n\nIn cut -d ' ' -f1, -d ' ' sets \"space\" as the delimiter, -f1 means to get the first column. \nSo the above lines becomes:\nurllib3\nwheel\n\nthen pass them to xargs to run the command, pip install -U, with each line as appending arguments\n-n1 limits the number of arguments passed to each command pip install -U to be 1\n", "Time": "Dec 18 '16", "Comment 1": "\nI received this warning DEPRECATION: The default format will switch to columns in the future. You can use --format=(legacy|columns) (or define a format=(legacy|columns) in your pip.conf under the [list] section) to disable this warning.\r\n                \r\n                    \u2013\u00a0Reman\nNov 26 '16 at 14:01\n", "Comment 2": "\n@Reman: that is because you are using Pip v9.0.1. This is just a deprecation message meaning that some functionalities will not survive in a future Pip release. Nothing to be concerned about ;)\r\n                \r\n                    \u2013\u00a0AlessioX\nDec 17 '16 at 20:11\n", "Comment 3": "\nHowever, this has to be marked as the final solution. Indeed the accepted answer will run all over your pip packages, which is a waste of time if you have to update only 1 or 2 packages. This solution, as instead, will run just all over the outdated packages\r\n                \r\n                    \u2013\u00a0AlessioX\nDec 17 '16 at 20:12\n", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "38"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nI had the same problem with upgrading. Thing is, i never upgrade all packages. I upgrade only what i need, because project may break.\nBecause there was no easy way for upgrading package by package, and updating the requirements.txt file, i wrote this pip-upgrader which also updates the versions in your requirements.txt file for the packages chosen (or all packages).\nInstallation\npip install pip-upgrader\n\nUsage\nActivate your virtualenv (important, because it will also install the new versions of upgraded packages in current virtualenv).\ncd into your project directory, then run:\npip-upgrade\n\nAdvanced usage\nIf the requirements are placed in a non-standard location, send them as arguments:\npip-upgrade path/to/requirements.txt\n\nIf you already know what package you want to upgrade, simply send them as arguments:\npip-upgrade -p django -p celery -p dateutil\n\nIf you need to upgrade to  pre-release / post-release version, add --prerelease argument to your command.\nFull disclosure: I wrote this package.\n", "Time": "Apr 26 '17", "Comment 1": "\nThis is what pip should do by default.\r\n                \r\n                    \u2013\u00a0Nostalg.io\nJun 8 '17 at 15:51\n", "Comment 2": "\nheads up with your tool some character escapes don't seem to work correctly on my windows machine but other than that it's fine\r\n                \r\n                    \u2013\u00a0Luke\nJul 12 '17 at 12:43\n\n\n\n", "Comment 3": "\nhaven't really tested it on windows, but i'll install a virtual machine. Thanks\r\n                \r\n                    \u2013\u00a0Simion Agavriloaei\nJul 12 '17 at 14:01\n", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "33"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nFrom https://github.com/cakebread/yolk :\n$ pip install -U `yolk -U | awk '{print $1}' | uniq`\n\nhowever you need to get yolk first:\n$ sudo pip install -U yolk\n\n", "Time": "Jan 3 '13", "Comment 1": "\nLast commit 7 years ago\r\n                \r\n                    \u2013\u00a0Boris\nJul 29 '19 at 6:33\n", "Comment 2": "\nin year 2013 AD\r\n                \r\n                    \u2013\u00a0dotbit\nDec 10 '19 at 19:09\n", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "27"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nOne-liner version of @Ramana's answer.\npython -c 'import pip, subprocess; [subprocess.call(\"pip install -U \" + d.project_name, shell=1) for d in pip.get_installed_distributions()]'\n\n`\n", "Time": "Apr 26 '18", "Comment 1": "\nsubprocess.call(\"sudo pip install... in case you need permissions\r\n                \r\n                    \u2013\u00a0Maximiliano Rios\nMay 27 '14 at 19:50\n\n\n\n", "Comment 2": "\n@MaximilianoRios Please do not sudo pip install, use a virtual env, instead.\r\n                \r\n                    \u2013\u00a0Bengt\nFeb 20 '16 at 15:28\n\n\n\n", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "26"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nwhen using a virtualenv and if you just want to upgrade packages added to your virtualenv, you may want to do:\npip install `pip freeze -l | cut --fields=1 -d = -` --upgrade\n\n", "Time": "Sep 13 '11", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "20"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nWindows Powershell solution\npip freeze | %{$_.split('==')[0]} | %{pip install --upgrade $_}\n\n", "Time": "Sep 16 '16", "Comment 1": "\npip list --outdated | %{$_.split('==')[0]} | %{pip install --upgrade $_}?\r\n                \r\n                    \u2013\u00a0Foad\nMay 22 '19 at 8:38\n", "Comment 2": "\nPerhaps pip list --outdated --format freeze | %{$_.split('==')[0]} | %{pip install --upgrade $_} would be more appropriate.\r\n                \r\n                    \u2013\u00a0brainplot\nJan 3 at 5:06\n", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "17"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nuse awk update packges:\n\npip install -U $(pip freeze | awk -F'[=]' '{print $1}')\n\nwindows powershell update\n\nforeach($p in $(pip freeze)){ pip install -U $p.Split(\"=\")[0]}\n\n", "Time": "Dec 29 '18", "Comment 1": "\npip freeze | awk -F'[=]' '{print $1}' | xargs pip install -U\r\n                \r\n                    \u2013\u00a0JohnDHH\nMar 13 '18 at 3:16\n\n\n\n", "Comment 2": "\nAnd for python 3...  pip3 install -U $(pip3 freeze | awk -F'[=]' '{print $1}')\r\n                \r\n                    \u2013\u00a0Jimmy M.G. Lim\nApr 3 '19 at 7:48\n", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "15"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nThe simplest and fastest solution that I found in the pip issue discussion is:\npip install pipdate\npipdate\n\nSource: https://github.com/pypa/pip/issues/3819\n", "Time": "Mar 3 at", "Comment 1": "\nWhereas other solutions stalled upon encountering the slightest anomaly, this solution warned and then skipped the problem to continue with the other packages. Great!\r\n                \r\n                    \u2013\u00a0Serge Stroobandt\nMay 10 '18 at 20:14\n", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "15"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nYou can try this :\nfor i in ` pip list|awk -F ' ' '{print $1}'`;do pip install --upgrade $i;done\n\n", "Time": "Jul 17 '13", "Comment 1": "\nthis is the cleanest, highest readable way to update pip packages in the most amount of brevity. great.\r\n                \r\n                    \u2013\u00a0Mark Shust\nOct 28 '13 at 12:41\n\n\n\n", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "12"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nThe rather amazing yolk makes this easy.\npip install yolk3k # don't install `yolk`, see https://github.com/cakebread/yolk/issues/35\nyolk --upgrade\n\nFor more info on yolk: https://pypi.python.org/pypi/yolk/0.4.3\nIt can do lots of things you'll probably find useful.\n", "Time": "Jul 26 '16", "Comment 1": "\nYour answer has been changed from yolk to yolk3k, your original answer definitely had issues with python3.\r\n                \r\n                    \u2013\u00a0AXO\nDec 19 '16 at 19:41\n\n\n\n", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "12"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\n@Ramana's answer worked the best for me, of those here, but I had to add a few catches:\nimport pip\nfor dist in pip.get_installed_distributions():\n    if 'site-packages' in dist.location:\n        try:\n            pip.call_subprocess(['pip', 'install', '-U', dist.key])\n        except Exception, exc:\n            print exc\n\nThe site-packages check excludes my development packages, because they are not located in the system site-packages directory. The try-except simply skips packages that have been removed from PyPI.\n@endolith: I was hoping for an easy pip.install(dist.key, upgrade=True), too, but it doesn't look like pip was meant to be used by anything but the command line (the docs don't mention the internal API, and the pip developers didn't use docstrings).\n", "Time": "Apr 26 '18", "Comment 1": "\nOn Ubuntu (and other Debian derivatives), pip apparently puts packages in /usr/local/lib/python2.7/dist-packages or similar. You could use '/usr/local/lib/' instead of 'site-packages' in the if statement in this case.\r\n                \r\n                    \u2013\u00a0drevicko\nJan 13 '13 at 4:31\n\n\n\n", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "11"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nSent through a pull-request to the pip folk; in the meantime use this pip library solution I wrote:\nfrom pip import get_installed_distributions\nfrom pip.commands import install\n\ninstall_cmd = install.InstallCommand()\n\noptions, args = install_cmd.parse_args([package.project_name\n                                        for package in\n                                        get_installed_distributions()])\n\noptions.upgrade = True\ninstall_cmd.run(options, args)  # Chuck this in a try/except and print as wanted\n\n", "Time": "Jan 26 '14", "Comment 1": "\nVersion with error handling (as per comment): gist.github.com/SamuelMarks/7885f2e8e5f0562b1063\r\n                \r\n                    \u2013\u00a0Samuel Marks\nApr 27 '15 at 5:39\n", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "9"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nThis seemed to work for me...\npip install -U $(pip list --outdated|awk '{printf $1\" \"}')\n\nI used printf with a space afterwards to properly separate the package names.\n", "Time": "Aug 5 '15", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "9"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nThe pip_upgrade_outdated does the job. According to its docs:\nusage: pip_upgrade_outdated [-h] [-3 | -2 | --pip_cmd PIP_CMD]\n                            [--serial | --parallel] [--dry_run] [--verbose]\n                            [--version]\n\nUpgrade outdated python packages with pip.\n\noptional arguments:\n  -h, --help         show this help message and exit\n  -3                 use pip3\n  -2                 use pip2\n  --pip_cmd PIP_CMD  use PIP_CMD (default pip)\n  --serial, -s       upgrade in serial (default)\n  --parallel, -p     upgrade in parallel\n  --dry_run, -n      get list, but don't upgrade\n  --verbose, -v      may be specified multiple times\n  --version          show program's version number and exit\n\nStep 1:\npip install pip-upgrade-outdated\n\nStep 2:\npip_upgrade_outdated\n\n", "Time": "Oct 24 '18", "Comment 1": "\nStep 1: pip install pip-upgrade-outdated  Step 2: pip-upgrade-outdated  ...done\r\n                \r\n                    \u2013\u00a0shao.lo\nOct 23 '18 at 22:55\n", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "9"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nThis is a PowerShell solution for Python 3:\npip3 list --outdated --format=legacy | ForEach { pip3 install -U $_.split(\" \")[0] }\n\nAnd for Python 2:\npip2 list --outdated --format=legacy | ForEach { pip2 install -U $_.split(\" \")[0] }\n\nThis upgrades the packages one by one. So a\npip3 check\npip2 check\n\nafterwards should make sure no dependencies are broken.\n", "Time": "Jul 4 '17", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "7"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nHow about:\npip install -r <(pip freeze) --upgrade\n\n", "Time": "Sep 12 '17", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "7"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nThe shortest and easiest on Windows.\npip freeze > requirements.txt && pip install --upgrade -r requirements.txt && rm requirements.txt\n\n", "Time": "Apr 23 '18", "Comment 1": "\n@Enkouyami on windows 7 this command does not work without the -r. -r must preclude the path to the requirements file.\r\n                \r\n                    \u2013\u00a0Chockomonkey\nJul 16 '18 at 21:45\n", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "7"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nMy script:\npip list --outdated --format=legacy | cut -d ' ' -f1 | xargs -n1 pip install --upgrade\n\n", "Time": "Jan 10 '17", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "6"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nIsn't this more effective?\npip3 list -o | grep -v -i warning | cut -f1 -d' ' | tr \" \" \"\\n\" | awk '{if(NR>=3)print}' | cut -d' ' -f1 | xargs -n1 pip3 install -U \n\n\npip list -o lists outdated packages;\ngrep -v -i warning inverted match on warning to avoid errors when updating\ncut -f1 -d1' ' returns the first word - the name of the outdated package;\ntr \"\\n|\\r\" \" \" converts the multiline result from cut into a single-line, space-separated list;\nawk '{if(NR>=3)print}' skips header lines \ncut -d' ' -f1 fetches the first column\nxargs -n1 pip install -U takes 1 argument from the pipe left of it, and passes it to the command to upgrade the list of packages.\n\n", "Time": "Jun 25 '17", "Comment 1": "\nHere's my output: kerberos iwlib PyYAML Could pygpgme Could Could Could ... Note all the \"Could\"s. Those stem from output of pip list -o of \"Could not find any downloads that satisfy the requirement <package>\"\r\n                \r\n                    \u2013\u00a0DrStrangepork\nNov 14 '14 at 21:03\n", "Comment 2": "\nCan you paste the output of pip list -o ?\r\n                \r\n                    \u2013\u00a0Alex V\nNov 15 '14 at 9:30\n", "Comment 3": "\nComments don't format this well, but here's a snippet (line endings are marked with ';'): # pip list -o; urwid (Current: 1.1.1 Latest: 1.3.0); Could not find any downloads that satisfy the requirement python-default-encoding; pycups (Current: 1.9.63 Latest: 1.9.68); Could not find any downloads that satisfy the requirement policycoreutils-default-encoding; Could not find any downloads that satisfy the requirement sepolicy; \r\n                \r\n                    \u2013\u00a0DrStrangepork\nNov 17 '14 at 22:30\n\n\n\n", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "6"}, {"Question": "How to upgrade all Python packages with pip?", "Answer": "\nHere is my variation on rbp's answer, which bypasses \"editable\" and development distributions. It shares two flaws of the original: it re-downloads and reinstalls unnecessarily; and an error on one package will prevent the upgrade of every package after that.\npip freeze |sed -ne 's/==.*//p' |xargs pip install -U --\n\nRelated bug reports, a bit disjointed after the migration from bitbucket:\n\nhttps://github.com/pypa/pip/issues/49\nhttps://github.com/pypa/pip/issues/59\n\n", "Time": "May 26 '11", "Comment 1": "null", "Comment 2": "null", "Comment 3": "null", "Link": "https://stackoverflow.com//questions/2720014/how-to-upgrade-all-python-packages-with-pip", "UpVotes": "5"}]